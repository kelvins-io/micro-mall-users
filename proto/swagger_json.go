package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x8f\xdb\xc6\xf1\x7f\x7f\x9f\x82\xd0\xff\xff\x32\xf5\xa5\x6e\xd1\x17\x7e\x47\x4b\x3c\x5b\xb0\x1e\x0e\x92\xce\xee\xa1\x30\x88\x3d\x72\xa5\xdb\x98\x0f\x32\x77\x79\xb6\x1a\x18\x38\x17\x8d\x6b\xa3\x4d\x1d\x20\x8e\xd3\x20\x6e\x62\xa3\x8d\x6b\xa0\x80\x1d\x20\x6e\x9d\x9c\xeb\xfa\xcb\x58\xf2\xf9\x5b\x14\x5c\x8a\x3a\x3e\x2c\x29\x3e\xe9\x8e\x34\xb8\x40\x02\x1f\xc9\x9d\x9d\x9d\x9d\xdf\xec\xec\xec\xce\xea\xe3\x35\x8e\xab\xe1\x6b\x60\x34\x82\x46\xed\x0c\x57\x3b\x7d\xea\xc3\xda\x07\xd6\x33\xa4\x0d\xf5\xda\x19\xce\x7a\xcf\x71\x35\x82\x88\x02\xad\xf7\x63\x43\x27\xfa\xba\x8a\x24\x43\x17\x55\xa0\x28\xa2\x89\xa1\x81\x45\xfb\x31\xfd\xb7\xfd\xff\x53\xf4\x09\x25\xc5\x71\xb5\x3d\x68\x60\xa4\x6b\x16\x81\xf9\x3f\x39\x4d\x27\x1c\x86\xa4\xb6\xc6\x71\x37\x68\x83\x92\xae\x61\x53\x85\xb8\x76\x86\xfb\x8d\x5d\x0b\x8c\xc7\x0a\x92\x00\x41\xba\xb6\xfe\x11\xd6\x35\xeb\xdb\xcb\xf4\xdb\xb1\xa1\xcb\xa6\x14\xf3\x5b\x40\x76\xf1\x51\x4f\xd6\xf7\x7e\x4e\x39\x5c\x07\x92\xa4\x9b\x1a\x59\x97\x76\x81\x31\x82\x8b\x0f\xac\x1a\x26\x71\xfd\x69\xc9\xc7\x54\x55\x60\x4c\x2c\xf6\xdf\xde\x7b\x32\xbb\xfd\xe2\xf0\xf9\xe3\xd9\xed\x17\xd3\x4f\x3e\x99\xee\xff\x67\xde\x47\xfa\xa1\x3e\x86\x06\xe5\xa1\x29\x5b\x1f\x6f\x59\x92\xe8\x43\x63\x0f\x49\x50\xb4\xfe\xe0\xed\x36\xeb\x76\x93\xae\x8a\x06\xc4\x63\x5d\xc3\x10\x7b\x1a\xe6\xb8\xda\xe9\x0f\x3f\xf4\x3d\xe2\xb8\x9a\x0c\xb1\x64\xa0\x31\x99\x8b\x94\xe7\xb0\x29\x49\x10\xe3\xa1\xa9\x70\x0e\xa5\x53\x2e\xf2\x76\x27\xa4\x5d\xa8\x82\x00\x31\x8e\xab\xfd\xbf\x01\x87\x16\x9d\xff\x5b\x97\xe1\x10\x69\xc8\xa2\x3b\x1f\xc6\x00\xd3\xbd\x39\xf9\x9a\x87\xc8\x0d\xd7\x5f\x37\xdc\xed\xd6\x64\x38\x04\xa6\x42\x96\xf7\x41\xe3\x4c\x0d\x5e\x1f\x43\x89\x40\x99\x83\x86\xa1\x1b\xf9\x75\xc5\x30\x35\x82\x54\x28\x58\x54\x23\x18\x5f\x63\x74\xa1\x36\x06\x06\x50\x21\x81\xc6\x91\xb2\xd9\xc5\xd7\x1f\x0d\xa8\x14\x20\x3b\xba\x3c\xf1\xf3\x8b\xb4\xb0\x37\x06\xbc\x6a\x22\x03\x5a\xda\x42\x0c\x13\xae\x68\xc8\xae\x9a\x10\x93\x38\x1d\xbf\xec\xea\x38\x01\x23\x7f\x97\x3d\x0a\x7d\x44\xef\xf2\x9a\x9b\xce\x5c\x78\x47\x40\x83\xd7\x11\x26\xeb\xe3\x5d\x5d\xf3\xa0\x6c\x04\xc3\x51\x36\xfb\xdb\xfe\xec\xdb\xef\x6c\xac\xcd\xfe\xf2\x6c\xfa\xd9\xe3\xd9\x0f\x4f\xa6\xb7\xfe\xf4\xb3\xd9\x9d\x3f\xce\x1e\x1c\x4c\xef\xbe\x88\x8b\xba\xfa\x2e\x94\xae\x58\x4f\xce\x4e\x36\x29\x07\x25\x00\x9d\x9f\xe7\x0a\x73\x4e\x09\xc1\x1c\x55\x76\x63\x22\x4a\xba\x0c\xd9\xd8\xbb\x6a\x42\x23\x0a\x7c\x43\xa0\x60\x3f\xfa\xc8\x64\x4c\xa9\x63\x62\x20\x6d\x54\x0b\x13\x77\x08\x4f\x63\x9f\xb6\xad\x8e\x99\xd5\xa2\x17\xc9\x50\x23\x88\x4c\xd2\x40\xf7\xf0\xe0\x9f\x6f\x5e\xbe\x4a\x0c\xd5\xa6\xd3\x64\x99\xb0\xea\x30\x5d\x81\xd5\x29\x15\x58\x53\x32\x73\x4d\x7e\x1f\xec\x86\x7b\xfd\xb0\xc4\x66\x1c\xfe\xf9\xc5\xf4\xee\x7d\xdb\x66\xbc\x79\xfd\x68\x76\xf3\x59\x5c\x9b\x71\x0e\x12\x0a\x3e\xab\xb1\x12\x58\x0b\x17\xbb\x95\x9d\x70\x4a\x08\x0c\x4c\xb4\x3a\x18\xf8\xde\x0e\x75\x43\x05\x96\x68\x6b\x48\x23\xbf\xfa\xe5\x31\xa3\xc4\x59\x89\x8a\x48\x4e\x03\x98\x79\xed\xa6\x9c\x10\x33\x3c\xab\x5e\xc1\x81\xb3\xe0\xb9\x42\x8f\x53\xc2\xd1\x23\x2a\x08\x93\xfc\x21\x04\x0c\x03\x04\x57\xb8\x04\xaa\x7e\x9d\xe1\x96\x02\x2f\x1a\x7a\xbe\x31\xa4\x21\x22\x45\x81\x92\x25\xcc\x8d\x45\x35\xd5\x54\x08\x3a\x6e\xc4\x4a\x96\xd7\x97\x6a\x31\x7b\xef\xdf\x87\xcf\xff\x31\x7d\xf0\xfd\xf4\xaf\xfb\x89\xfd\xe2\x06\x54\xd0\x1e\x34\x26\x65\x99\xed\x98\x8c\x57\xc8\x75\x4a\xb1\xe7\xbd\x18\x8e\xaa\x3c\x1f\x56\x11\xc9\xb8\x28\x76\x06\x69\x04\x8e\xa0\xb1\xc4\xd0\xfc\xe2\x74\x49\x0c\x8d\x23\xe2\x34\x8e\x81\x6d\x6b\x52\xf9\xd3\x65\xb3\x34\x0c\xb6\x2b\x3b\xe3\x94\xd2\xdb\x19\x6b\x88\x45\x97\xb1\xc9\x9f\x6d\xb6\xd5\x88\xb2\x19\xb9\x81\xdf\xa9\x1d\xb9\xeb\xf4\xe6\xf5\xd3\xd9\xbd\x9f\xd2\xc3\xba\xad\xcb\x68\x38\x29\x23\xb2\xd9\x9c\x57\xe0\x76\x4a\x51\x77\xa1\xc2\xc6\xed\x64\xb7\xa2\xe8\x9c\x3a\x44\x5a\xec\x85\xf6\xec\xdb\xef\x66\x77\xfe\x9b\x26\x32\xb5\x81\x34\xb9\x4c\xa1\x29\x37\xbf\x15\xbc\x9c\x52\xad\xae\x4f\xc0\xe9\x45\xda\x1e\x22\xd0\xde\x20\x88\x8b\xd3\x87\x3f\xcd\x3e\x7d\xfa\xee\x77\xfb\x87\xcf\x5e\xbc\x7d\x78\xd3\x76\x83\xed\x3f\xdf\x1c\x1c\xa4\x88\x26\x9f\x9d\x34\x29\x17\x75\xef\x2e\x45\x61\xe1\x3b\x67\xdd\xcd\x76\x85\x62\xa7\x84\xa0\xd8\xad\x67\xef\xc7\x86\xcb\x3a\x35\x4a\x31\x31\x33\xbd\xfd\xe5\xe1\xa3\x27\xb3\x3b\xfb\xb3\x07\x77\xec\x19\x2e\x2e\x4e\x5a\x08\x97\x6a\xdb\xc5\xcd\x6f\x85\x0a\xa7\x84\x6d\x3f\x82\x11\x14\x55\x48\xc0\x29\xfa\x2f\xcd\x54\x0b\xb1\xde\x8a\xb3\x71\xea\xe5\x1c\xa3\xdf\xae\x00\xd7\xab\x61\x9d\xe8\x57\xa0\xf6\xbe\x18\xa1\x44\x47\xbd\x82\x7b\xbf\xc9\x0f\x79\x79\xe6\xed\xd2\x1c\xf3\x0a\x72\x5d\xd9\x26\xa7\x54\x67\x47\x8e\x1d\xba\x8a\x3e\xa2\x5c\xc7\x3b\x06\xfd\xd5\xcb\xe9\xab\x2f\x62\xfb\x0b\x16\x69\xeb\x49\x19\x60\xb9\x60\xb6\x42\xa3\x53\x8a\x1a\x64\x72\x0d\xd5\xc9\xc6\x95\x54\x68\x48\xbb\x40\x23\x78\x1d\x60\xac\x4b\x08\x10\xb8\x8e\x77\xf5\xb1\xb8\x63\x62\xa4\x41\x8c\xe3\xe2\x6a\xfa\xc5\x2d\x9a\x58\xf0\xc3\xe1\xcd\x7b\xd3\x83\x2f\xdf\x7d\x1e\xb5\x76\x6d\x3b\xad\x2e\xc2\xbc\xce\x03\xde\xe1\xa2\xbf\xab\x8f\xcb\x00\x3a\x36\xe7\x15\x02\x9d\x52\x54\x04\x86\x8d\x5b\x6e\x70\xf4\xeb\x78\x1a\x48\x9a\x32\x22\xb1\x01\xf8\xf4\xd1\xec\xe1\x8f\x36\x0c\x3f\x38\x7c\x7d\x6f\xfa\xf5\x37\xf6\xa3\xb7\x2f\x3f\x9f\x7d\xf3\x20\x15\x1a\xdb\x80\x40\x03\x01\x85\xa7\x8c\x94\x09\x8d\x1e\xce\x2b\x34\x3a\xa5\xf0\x68\xf4\x8d\x5b\x91\xd0\xa8\xce\x59\x4b\xb6\x3e\xb4\x01\x79\xf8\xaf\xdf\xcf\xee\x7f\x95\x04\x83\xe7\x20\x09\x08\xa5\x0c\x08\x64\xf1\x5d\xe1\xcf\x29\x21\xf8\x73\x54\x6b\x25\x47\x04\x56\x78\x72\x38\x06\xaa\x8e\x4e\x09\xe8\x78\x99\xf7\x38\xbb\xfb\xd9\x9b\x83\xbf\x27\xc7\x4a\x29\x81\x52\xa1\xa4\xfc\xb3\x54\x11\x26\xa8\x31\xc0\xf8\x9a\x6e\xc8\xeb\x06\xc4\x30\xb6\xb7\xf8\xee\x0f\x9f\xbe\x7d\xf5\xd4\x0e\x86\x4c\x9f\xdd\x7a\xfb\xf0\x66\xdc\x90\xc8\xe6\xbc\xbd\x1e\x6d\xae\x04\x40\xf3\x30\x5c\x81\xcc\x29\x45\x05\x99\x6f\xb8\x4e\x36\x3c\x62\xc0\x11\xc2\x84\x5e\x30\xf1\x71\xac\x89\xcc\xce\xf6\x4e\xb6\x29\xd9\x73\x1a\x29\x01\x98\x1c\x5e\x2b\x1c\x39\xa5\xa8\x38\x3a\x1a\xa9\x93\x85\x10\x26\x80\xc0\xf4\x79\x27\x89\x73\x4d\xfa\x56\x7b\x65\x80\x92\x97\xe3\x0a\x50\x4e\xa9\x4e\xae\x1d\xef\xc9\x35\x1b\xa0\x89\x36\xd1\x66\x5f\x3f\x9f\xdd\xff\xde\x06\xa8\xed\x43\xce\xf6\x63\x3b\x90\x5b\x63\x19\x10\x68\x3d\xa2\xbb\x20\xa5\xc1\x2b\x8b\xef\x0a\xb5\x4e\x29\xea\x34\xc8\x1e\xb5\xe3\x9d\x12\x17\x37\x85\xb9\xb8\x5b\x74\xc3\xbe\x98\x6c\xc7\x1c\xf2\x9a\x27\x59\xca\xb1\x33\xfa\xce\x47\x50\x3a\xb2\x7a\xd6\xe7\x63\x68\x10\xe4\xc3\x07\xfd\x5e\x34\x0d\xc5\x8f\x9a\xb0\x6d\x79\xf7\xa8\xee\x01\xc5\x84\x4b\x2a\x7a\xf4\xf8\xc8\xc8\xed\x4c\x88\xab\xe3\x37\x98\xa6\xc6\xa3\x70\x19\xba\x08\x7d\x04\x62\xf7\xcf\x77\x20\xd7\x53\x8f\x75\x2c\x2a\xfc\x50\x94\x9b\xaa\x0a\x31\x06\xa3\x65\x72\x63\x56\x95\x21\x01\x48\x09\x58\xb8\xf0\x19\x29\x64\x3e\x0a\xd1\x7c\xb7\x4a\xb1\x21\xcd\x1c\x27\x0a\x98\x79\xa6\xfa\xc0\x66\x25\x30\x56\x3e\x6d\xa8\x41\xcd\x54\x3d\xa0\xa8\x6d\x0a\xbd\x7e\xb7\xc3\xb7\xdc\x36\xbd\xde\x6d\x6f\xf2\x9d\x6d\xf7\xa3\xfe\x76\x7f\x20\xb4\x1d\xf6\x16\x38\x73\x99\xc8\x23\x4a\x41\x2e\x43\x6f\x9a\xca\xa0\x5e\x92\xae\xaa\xba\xe6\x1f\x93\x28\x0f\x8e\x56\x08\xce\x01\xee\x91\x46\x58\xa4\xd7\x88\x85\x0d\xf5\x8e\xae\x2b\x10\x68\xcb\x20\x14\x23\x2d\xb9\x10\x3d\x8f\xc1\x7c\xe0\xbe\xa1\xb2\x30\xee\x9d\xf1\x8b\xce\xb5\x8e\xb4\xf4\x18\xae\x7b\xb1\xba\xd5\x6f\x44\x02\xd5\xfa\x9c\xc5\x82\x87\xeb\x4c\x02\x0b\xda\xef\xc8\xa5\x2f\xa1\xd9\x0f\x6c\xab\x8d\x47\xb1\x2d\x76\xb8\x78\x05\x15\x20\x25\x5b\x97\x34\x02\xb5\x50\xb3\x90\x80\x15\x66\xfe\x53\x21\xb4\xd3\x6d\x06\xb5\xa1\x2e\x2a\x11\x76\x30\xeb\x94\xb7\xb8\x41\xd2\x12\x43\x1b\x20\x2d\xf1\xc4\x17\xb9\x73\x59\x44\x79\x26\x20\x19\xe8\x18\x4d\x80\x88\x29\x15\xf6\xfd\x35\x45\x94\xc8\xf1\x68\x98\x23\x0b\x8f\x08\xe3\x2b\x59\x68\xb6\x53\x11\x25\x9a\x80\xe4\x22\xaf\x26\x81\x1c\x8a\xeb\xc8\x2c\x91\x43\xee\x4a\xe5\x49\x6f\x4f\xa9\x55\xac\x03\xf9\x65\x10\x66\xce\x4a\x55\x3a\x65\xca\xab\xff\x4d\xdc\xb0\x7d\xb2\xf4\x8e\x5f\x43\xd8\xe0\xb7\x5a\x03\x71\xb0\xbd\x29\x88\x1b\x7c\xab\x2f\xb8\xfd\x40\xcf\xdb\x41\x6f\x4b\x88\xf4\x0a\x19\xb4\x82\x3c\x33\x33\xdc\x8a\x36\x68\xf4\x1e\x8f\xe3\x99\x60\xda\xfa\x0e\x52\xa0\x9d\x0a\x94\xd4\x0c\xd0\x08\xd7\xd9\x89\xb3\x83\x9a\x45\x8c\x34\x1c\x2c\x5e\xf1\x5e\x38\xb0\x8c\x77\xda\xfe\xe6\x35\xf9\x82\x55\x8d\x29\x48\xe8\x73\x9b\x97\x51\xb4\xdd\x6c\x26\x29\x7f\xae\x56\x2a\xc1\x7a\x08\x5e\x0b\xf4\x35\x85\x37\xee\x91\x41\x2a\x08\xb6\xbb\x67\x9b\x2d\x41\xdc\x3c\xdf\xed\x78\xc0\x27\xb4\xf9\x66\x2b\x12\x70\x9e\x9a\x21\xac\x0d\x68\xbe\x5e\x96\x38\xa3\x8f\x40\x26\x41\x65\x88\x32\x5d\x6a\xb8\x85\x73\x51\xe8\x35\x37\xb6\xc5\x7a\xb7\xe1\x91\xd9\xa0\x7b\x41\xe8\x44\xc7\x98\x2e\x35\xc2\x44\xe5\xce\xcf\xc8\x0c\x25\xe2\xed\xe9\x32\x6d\x3d\x92\x4e\x5c\x5d\x5d\x46\xcc\x65\x17\x98\x24\xf7\xa0\x81\x86\x13\xff\xdd\x05\xb1\x48\x5f\xa4\x55\xc3\x97\xdc\x4c\x95\x59\xda\x79\x5a\x29\xb6\x26\x79\xf2\x9e\x8a\x36\x7f\x38\x57\x91\x8b\xb9\x82\xc7\x25\xf6\x0c\x1d\xce\xdd\x8e\x46\x28\x52\x8a\x9e\x46\xe7\x69\x64\xe8\xb7\xfb\xcc\x6d\xaa\x9d\x0f\xdf\xf6\xae\x5b\x04\x34\x83\x6a\x05\x74\x11\x16\x17\x69\x5a\x79\x04\x94\x97\x24\x2f\x15\x02\x46\x31\xb8\x67\x26\x0d\x14\x54\x35\x68\x4e\x8f\x68\xae\x80\xb2\x25\xf2\x7c\x22\x8a\x4b\xb2\x68\x0a\xa1\x16\x6e\xb4\x91\x08\x38\xa4\xdf\xde\x4b\x2a\x4f\x57\x55\x0d\x5e\x27\xe2\xea\x46\x1a\x61\x51\xdf\x83\xa1\x3b\xa1\xa9\x2c\x80\x27\x30\x98\x61\x84\x57\xd1\xdf\x55\xe2\xd1\x39\xe1\x29\x02\x59\x4e\xb5\xb7\xbc\x0b\x81\x42\x76\x45\x09\x18\xb2\xa8\x85\xc6\x89\xa2\x28\x30\x7e\xa8\x84\xcb\x47\x85\x57\x84\x0c\x02\xae\x67\xe9\xaf\x64\x40\x40\xa0\x48\x90\x9a\x6a\xef\xdc\xa4\x27\x3a\x92\x55\x4f\x00\x80\x1c\xe6\x8f\x9c\x83\xf3\xae\xbe\x2f\xce\x55\x25\x5d\x4f\x74\x9d\x8a\xbe\x35\x45\x22\xc1\x14\xd4\xfe\xe7\x6e\x1e\x22\x84\xe2\x72\x7e\x33\x89\xc1\x75\x1b\x48\x0a\x08\x30\x7d\xf6\x34\xca\x1f\x79\xd7\x65\x86\x0e\xe6\xae\xa7\xd9\x22\xa8\xec\xe0\xba\xc7\xa8\x1c\x87\xee\x44\x5e\x08\x5b\x08\x54\x85\x73\xbf\x18\x98\x36\x24\x20\x9b\x6a\xac\xc4\x27\xb2\x16\x5c\xe3\x34\x58\xd2\xc7\xe2\x58\x01\xc4\x6a\x24\x65\x75\x19\xd2\xd3\x7f\xd9\xe1\xe8\x55\xfe\x74\x07\x37\x7a\x02\x3f\xf0\x84\xc0\xb6\x36\x1b\xbe\x27\x0d\xa1\x25\x78\x9f\xf0\x5b\x8d\xe6\x20\xfa\x84\x87\x4d\x37\xc8\xf3\x26\x18\xc1\xac\x2a\xb1\xb8\xae\x2d\x77\x4f\xe5\xe8\x3a\xb5\x7c\x48\x87\x8f\x1d\x33\x6d\xa9\x60\x7e\x74\x3e\x11\x6e\x76\x3e\x5d\xc1\xcd\x97\x3f\x1b\x26\xcb\xc8\x60\x68\x88\xf3\xf3\xcd\x89\xcd\x05\x86\xd7\x57\xb1\x52\x3d\x4e\x77\x62\xd9\x76\x4e\x2c\x31\xac\x66\x61\x82\xe4\x4c\xeb\x30\x7a\x24\xc3\xa0\x3f\x0c\xbd\x82\xe8\x8c\x46\x80\x44\x52\x2f\x33\x23\x0e\x1a\x67\x31\x8f\x81\x9d\xc2\x68\x86\xe2\x00\xac\x48\x06\xc1\xb3\xd0\xc7\xc1\xcc\x8b\x98\xa9\x8e\x56\xc5\x84\x42\xf0\xb6\x95\x62\x09\xc9\xba\x49\x3a\xfd\xe0\x90\xb0\x6d\x82\xe5\x2e\x45\x7f\xab\x5e\x17\xfa\x7d\xcf\x56\x64\xaf\xd7\xed\x79\x0f\x88\x0a\x3d\xb1\xd3\x1d\x88\xc2\xaf\x9b\xfd\x41\xe0\x4d\xe0\x69\x5b\xe8\xd5\xcf\xf3\x9d\x01\xbb\xce\xe2\x6d\xe0\x0d\x5f\xaf\x77\xb7\xa2\x5e\x84\xf3\xb0\x79\xa9\x41\xdf\xb6\xf9\x41\xfd\x7c\xe0\x6d\xab\x7b\xae\xd9\xa1\xef\xf9\x56\xab\x7b\x29\xf0\xbe\x21\xb4\x9a\x17\x85\xde\xb6\xd8\xec\x6c\x74\x43\x5a\xf0\x7e\xc3\xe4\x64\xd0\xe3\x3b\x7d\xbe\x3e\x68\x76\x3b\xe2\x06\xdf\x6c\x09\x0d\x56\x27\x5a\xdd\xfa\x05\xd6\xf3\x66\xe7\x22\xdf\x6a\x36\x02\x0d\xd7\xcf\xf3\xbd\x73\x82\xd8\xdb\xea\x84\xbd\x62\x8c\xa1\xfb\xf5\xa0\xc7\x37\x04\xb1\xd3\x15\x85\xf6\xe6\x60\x3b\xf0\x55\x7f\xc0\x0f\x04\xda\x21\x7b\x9b\x35\xd2\x53\x74\x9a\x0a\x6a\x61\x54\x2a\x4e\xc1\x3c\x25\xe6\xfc\xb4\x64\x91\xe9\xca\x66\x8b\x83\xc9\xc8\x74\xb2\x42\x18\xcf\x08\xde\xc3\x7e\xa9\x3d\xdb\x30\xe6\x74\xba\x26\x87\x8b\x6f\x3c\x33\xef\xfc\x47\x2e\x13\x46\x32\xdc\x79\x34\x21\x1e\x41\xf2\x63\x01\x8b\x53\xfd\x6c\x4e\x55\xab\xc5\x54\xab\x58\x93\x88\xc4\x00\x32\x4c\xe9\x3a\xe9\x63\x7a\x7d\x75\x9a\x40\x0f\x5d\x3c\xa6\x54\xba\xd2\xa1\xa5\x88\xbb\x2b\xcc\x1f\x71\x8d\x1e\xf9\xe8\xbe\x7a\xa2\x6d\x59\x7c\xa0\xfc\xfb\xba\xf8\x2d\xae\x18\x3e\x3e\x93\x80\x4a\x03\xc0\x62\xea\x15\x13\x30\x60\x00\x25\xf1\x13\x06\xa1\x2c\xa6\x25\xa0\x80\x1d\x18\xba\x54\x4b\x6d\x5b\x97\x1a\x4f\x84\x45\x76\xce\x73\x14\xc6\xbc\xe7\x58\xe3\xaa\xdd\x7b\x82\x2d\x77\x50\xba\x8a\x34\x38\xdf\xbc\x97\x91\x86\xfc\x0f\x06\xcc\x23\x18\x69\x87\xa7\x90\x41\x8a\x42\x6d\x17\x7b\x32\xcc\x0a\x66\x6c\xd2\x5a\x8a\x13\x03\xf5\x4a\xd4\xc5\xd2\x5d\xef\xbd\xe5\xf1\xc6\x7a\x31\x64\x04\x11\x85\x7e\x3a\xff\x69\x8f\x1f\x5f\x1e\x3e\xbe\x39\xff\x09\x3d\xb6\x42\xb8\x56\x7e\x99\x5c\xd1\x64\x19\xa1\xae\x3e\xc7\x50\xee\x98\xea\xe4\xd5\xfc\x35\xeb\xbf\x1b\x6b\xff\x0b\x00\x00\xff\xff\xff\xaf\xab\x84\x6b\x8f\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
