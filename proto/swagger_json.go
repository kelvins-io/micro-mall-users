package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x8f\xdb\xc6\xf1\x7f\x7f\x9f\x82\xd0\xff\xff\x32\xf5\xa5\x6e\xd1\x17\x7e\x47\x4b\x3c\x5b\xb0\x1e\x0e\x92\xce\xee\xa1\x30\x88\x3d\x72\xa5\xdb\x98\x0f\x32\x77\x79\xb6\x1a\x18\x38\x17\x8d\x6b\xa3\x4d\x1d\x20\x8e\xd3\x20\x6e\x62\xa3\x8d\x6b\xa0\x80\x1d\x20\x6e\x9d\x9c\xeb\xfa\xcb\x58\xf2\xf9\x5b\x14\x5c\x52\x3a\x2e\x9f\xc4\x27\xdd\x91\x06\x17\x48\xe0\x23\xb9\xb3\xb3\xb3\xf3\x9b\x9d\x9d\xdd\x59\x7d\xbc\xc6\x71\x35\x7c\x0d\x8c\x46\xd0\xa8\x9d\xe1\x6a\xa7\x4f\x7d\x58\xfb\xc0\x7a\x86\xb4\xa1\x5e\x3b\xc3\x59\xef\x39\xae\x46\x10\x51\xa0\xf5\x7e\x6c\xe8\x44\x5f\x57\x91\x64\xe8\xa2\x0a\x14\x45\x34\x31\x34\xb0\x68\x3f\xa6\xff\xb6\xff\x7f\x8a\x3e\xa1\xa4\x38\xae\xb6\x07\x0d\x8c\x74\xcd\x22\xe0\xfc\x93\xd3\x74\xc2\x61\x48\x6a\x6b\x1c\x77\x83\x36\x28\xe9\x1a\x36\x55\x88\x6b\x67\xb8\xdf\xd8\xb5\xc0\x78\xac\x20\x09\x10\xa4\x6b\xeb\x1f\x61\x5d\xb3\xbe\xbd\x4c\xbf\x1d\x1b\xba\x6c\x4a\x31\xbf\x05\x64\x17\x1f\xf5\x64\x7d\xef\xe7\x94\xc3\x75\x20\x49\xba\xa9\x91\x75\x69\x17\x18\x23\xb8\xf8\xc0\xaa\x61\x12\xd7\x9f\x96\x7c\x4c\x55\x05\xc6\xc4\x62\xff\xed\xbd\x27\xb3\xdb\x2f\x0e\x9f\x3f\x9e\xdd\x7e\x31\xfd\xe4\x93\xe9\xfe\x7f\x9c\x3e\xd2\x0f\xf5\x31\x34\x28\x0f\x4d\xd9\xfa\x78\xcb\x92\x44\x1f\x1a\x7b\x48\x82\xa2\xf5\x07\x6f\xb7\x59\xb7\x9b\x74\x55\x34\x20\x1e\xeb\x1a\x86\x98\x69\x98\xe3\x6a\xa7\x3f\xfc\xd0\xf3\x88\xe3\x6a\x32\xc4\x92\x81\xc6\xc4\x11\x29\xcf\x61\x53\x92\x20\xc6\x43\x53\xe1\xe6\x94\x4e\xb9\xc8\xdb\x9d\x90\x76\xa1\x0a\x7c\xc4\x38\xae\xf6\xff\x06\x1c\x5a\x74\xfe\x6f\x5d\x86\x43\xa4\x21\x8b\xae\x33\x8c\x3e\xa6\x7b\x0e\xf9\x1a\x43\xe4\x86\xeb\xaf\x1b\xee\x76\x6b\x32\x1c\x02\x53\x21\xcb\xfb\xa0\x71\xa6\x06\xaf\x8f\xa1\x44\xa0\xcc\x41\xc3\xd0\x8d\x45\x57\xb2\xf6\xc4\x30\x35\x82\x54\x28\x58\x44\x23\xf8\x5e\x0b\xe8\x41\x6d\x0c\x0c\xa0\x42\x02\x8d\x23\x5d\xb3\x8b\xa7\x3b\x1a\x50\x29\x3e\x76\x74\x79\xe2\xe5\x17\x69\x61\x6f\x0c\x78\xd5\x44\x06\xb4\x94\x85\x18\x26\x5c\xd1\x88\x5d\x35\x21\x26\x71\x3a\x7e\xd9\xd5\x71\x02\x46\xde\x2e\x33\xfa\x7c\x44\xef\xf2\x9a\x9b\x8e\x23\xbc\x23\x9c\xc1\xeb\x08\x93\xf5\xf1\xae\xae\x31\x20\x1b\xc1\x70\x90\xcd\xfe\xb6\x3f\xfb\xf6\x3b\x1b\x6a\xb3\xbf\x3c\x9b\x7e\xf6\x78\xf6\xc3\x93\xe9\xad\x3f\xfd\x6c\x76\xe7\x8f\xb3\x07\x07\xd3\xbb\x2f\xe2\x82\xae\xbe\x0b\xa5\x2b\xd6\x93\xb3\x93\x4d\xca\x41\x09\x30\xe7\xe5\xb9\x82\x9c\x53\x42\x20\x47\x75\xdd\x98\x88\x92\x2e\xfb\xf8\xb6\xa1\x77\xd5\x84\x46\x14\xf6\x86\x40\xc1\x5e\xf0\x91\xc9\x98\x52\xc7\xc4\x40\xda\xa8\x16\x26\xed\x10\x9e\xc6\x1e\x65\x5b\x1d\x33\xab\x05\x2f\x92\xa1\x46\x10\x99\xa4\x41\xee\xe1\xc1\x3f\xdf\xbc\x7c\x95\x18\xa9\xcd\x79\x93\x65\x82\xea\x9c\xe9\x0a\xab\x4e\xa9\xb0\x9a\x92\x99\x6b\xf2\xfb\x60\x36\xdc\x8b\x87\x25\x26\xe3\xf0\xcf\x2f\xa6\x77\xef\xdb\x26\xe3\xcd\xeb\x47\xb3\x9b\xcf\xe2\x9a\x8c\x73\x90\x50\xec\x59\x8d\x95\xc0\x58\xb8\xd8\xad\xcc\x84\x53\x42\x50\x60\xa2\xd5\xa1\xc0\xf3\x76\xa8\x1b\x2a\xb0\x24\x5b\x43\x1a\xf9\xd5\x2f\x8f\x19\x24\xf3\x55\xa8\x88\xe4\x34\x78\x71\x6a\x37\xe5\x84\x90\xe1\x83\xea\x15\x1c\x37\x0b\x9e\x2b\xf0\x38\x25\x1c\x3c\xa2\x82\x30\xc9\x1f\x41\xc0\x30\x80\x7f\x75\x4b\xa0\xea\x55\x19\x6e\x29\xee\xa2\x91\xe7\x19\x42\x1a\x1d\x52\x14\x28\x59\xc2\xdc\x58\x54\x53\x4d\x85\xa0\xe3\x06\xac\x64\xb9\x7c\xa9\x16\xb2\xf7\xfe\x7d\xf8\xfc\x1f\xd3\x07\xdf\x4f\xff\xba\x9f\xd8\x29\x6e\x40\x05\xed\x41\x63\x52\x96\xb9\x2e\x90\xf1\x0a\xb8\x4e\x29\xf6\xac\x17\xc3\x4b\x95\x9d\x51\x15\x91\x8c\x8b\x62\x66\x90\x46\xe0\x08\x1a\x4b\xec\xcc\x2f\x4e\x97\xc4\xce\xcc\x45\x9c\xc6\x2d\xb0\x4d\x4d\x2a\x67\xba\x6c\x86\x26\x80\xed\xca\xcc\x38\xa5\xf4\x66\xc6\x1a\x61\xd1\x65\x6b\xf2\x67\x3b\xd8\x68\x44\x99\x8c\xdc\xb0\x3f\xaf\x1d\xb9\xdd\xf4\xe6\xf5\xd3\xd9\xbd\x9f\xd2\xa3\xba\xad\xcb\x68\x38\x29\x23\xb0\x83\x39\xaf\xb0\xed\x94\xa2\x6e\x3f\x85\x0d\xdb\xc9\xee\x41\xd1\x19\x75\x88\xb4\xd8\x8b\xec\xd9\xb7\xdf\xcd\xee\xfc\x37\x4d\x50\x6a\x03\x69\x72\x99\xa2\x52\x6e\x7e\x2b\x74\x39\xa5\x5a\x59\x9f\x80\xc7\x8b\xb4\x3d\x44\xa0\xbd\x35\x10\x17\xa6\x0f\x7f\x9a\x7d\xfa\xf4\xdd\xef\xf6\x0f\x9f\xbd\x78\xfb\xf0\xa6\xed\x03\xdb\x7f\xbe\x39\x38\x48\x11\x47\x3e\x3b\x69\x52\x2e\xea\xec\xfe\x44\x61\xd1\xeb\xb0\xee\x66\xbb\x02\xb1\x53\x42\x40\xec\x56\xb3\xf7\x63\xa7\x65\x9d\xda\xa4\x98\x90\x99\xde\xfe\xf2\xf0\xd1\x93\xd9\x9d\xfd\xd9\x83\x3b\xf6\xfc\x16\x17\x26\x2d\x84\x4b\xb5\xdf\xe2\xe6\xb7\x02\x85\x53\xc2\xb6\x1d\xc1\x08\x8a\x2a\x24\xe0\x14\xfd\x97\x66\xaa\x85\x58\x6b\xc5\xd9\x30\x65\x39\xc7\xe8\xb7\x2b\x80\xf5\x6a\x58\x27\xfa\x15\xa8\xbd\x2f\x36\x28\xd1\x01\x2f\xff\x9e\x6f\xf2\xa3\x5d\xcc\xac\x5d\x9a\xc3\x5d\x7e\xae\x2b\xd3\xe4\x94\xea\xc8\xc8\xb1\x23\x57\xd1\x47\x94\xeb\x78\x47\x9f\xbf\x7a\x39\x7d\xf5\x45\x6c\x6f\xc1\x22\x6d\x3d\x29\x03\x2a\x17\xcc\x56\x60\x74\x4a\x51\xe3\x4b\xae\x91\x3a\xd9\x90\x92\x0a\x0d\x69\x17\x68\x04\xaf\x03\x8c\x75\x09\x01\x02\xd7\xf1\xae\x3e\x16\x77\x4c\x8c\x34\x88\x71\x5c\x58\x4d\xbf\xb8\x45\x73\x09\x7e\x38\xbc\x79\x6f\x7a\xf0\xe5\xbb\xcf\xa3\xd6\xad\xed\x79\xab\x8b\x00\xef\xfc\x01\x3f\xe7\xa2\xbf\xab\x8f\xcb\x80\xb9\x60\xce\x2b\x00\x3a\xa5\xa8\x00\x0c\x1b\xb6\xdc\xd0\xe8\x55\xf1\x34\x88\x34\x65\x44\x62\xe3\xef\xe9\xa3\xd9\xc3\x1f\x6d\x14\x7e\x70\xf8\xfa\xde\xf4\xeb\x6f\xec\x47\x6f\x5f\x7e\x3e\xfb\xe6\x41\x2a\x30\xb6\x01\x81\x06\x02\x0a\x4f\x19\x29\x13\x18\x19\xce\x2b\x30\x3a\xa5\xf0\x60\xf4\x0c\x5b\x91\xc0\xa8\x3a\xac\x25\x5b\x1b\xda\x78\x3c\xfc\xd7\xef\x67\xf7\xbf\x4a\x02\xc1\x73\x90\xf8\x84\x52\x06\x00\x06\xf1\x5d\xc1\xcf\x29\x21\xf0\x9b\x6b\xd6\x4a\x4e\x06\xac\xf0\xb4\x70\x0c\x50\x1d\x1d\x0e\xd0\xf1\x32\xd7\x71\x76\xf7\xb3\x37\x07\x7f\x4f\x0e\x95\x52\xe2\xa4\x02\x49\xe9\xe7\xa8\x22\x4c\x4f\x63\x80\xf1\x35\xdd\x90\xd7\x0d\x88\x61\x6c\x57\xf1\xdd\x1f\x3e\x7d\xfb\xea\xa9\x1d\x07\x99\x3e\xbb\xf5\xf6\xe1\xcd\xb8\xd1\x90\x4d\xa7\xbd\x1e\x6d\xae\x04\x38\x63\x18\xae\x30\xe6\x94\xa2\x62\xcc\x33\x5a\x27\x1b\x19\x31\xe0\x08\x61\x42\xaf\x93\xf8\x38\xd6\x34\x66\x27\x77\x27\xdb\x8c\xec\xcd\x1b\x29\x01\x96\xe6\xbc\x56\x30\x72\x4a\x51\x61\x74\x34\x50\x27\x8b\x20\x4c\x00\x81\xe9\x33\x4d\x12\x67\x97\xf4\xad\xf6\xca\x80\x24\x96\xe3\x0a\x4f\x4e\xa9\x8e\xab\x1d\xef\x71\x35\x1b\x9f\x89\x36\xcf\x66\x5f\x3f\x9f\xdd\xff\xde\xc6\xa7\xed\x40\xce\xf6\x63\x7b\x8f\x5b\x63\x19\x10\x68\x3d\xa2\xdb\x1f\xa5\x81\x6b\x10\xdf\x15\x68\x9d\x52\xd4\x49\x30\x78\xd0\x8e\x77\x42\x5c\x5c\x0a\xe6\xe2\x6e\xd1\x0d\xfb\x0e\xb2\x1d\x73\xc8\x6b\x4c\x76\xd4\xdc\xcc\xe8\x3b\x1f\x41\xe9\xc8\xe8\x59\x9f\x8f\xa1\x41\x90\x07\x1e\xf4\x7b\xd1\x34\x14\x2f\x68\xc2\x76\xe3\xdd\xa3\xba\x07\x14\x13\x2e\xa9\xc8\xa8\xf1\x91\x8d\xdb\x99\x10\x57\xc7\x6f\x04\x5a\x1a\x46\xe1\x32\x74\x11\x7a\x08\xc4\xee\x9f\xe7\x10\x2e\x53\x2f\xe8\x30\x54\xf8\x51\x28\x37\x55\x15\x62\x0c\x46\xcb\xe4\x16\x58\x55\x86\x04\x20\xc5\x67\xe0\xc2\x27\xa4\x90\xe9\x28\x44\xf3\xdd\x2a\x15\x0c\xe9\xc0\x71\xa2\x80\x71\x12\xd3\x07\x36\x2b\xbe\xb1\xf2\x68\x43\x0d\x6a\xa6\xca\x80\xa2\xb6\x29\xf4\xfa\xdd\x0e\xdf\x72\x9b\xf4\x7a\xb7\xbd\xc9\x77\xb6\xdd\x8f\xfa\xdb\xfd\x81\xd0\x9e\xb3\xb7\xc0\x99\xcb\x42\x1e\x51\xf2\x73\x19\x7a\xab\x54\x06\xf5\x92\x74\x55\xd5\x35\xef\x98\x44\xf9\x6f\xb4\x82\x7f\x0a\x70\x8f\x34\xc2\x22\xbd\x32\x2c\x6c\xa8\x77\x74\x5d\x81\x40\x0b\x85\x97\xf3\x3a\xce\xc8\x45\x67\x29\x17\x42\x30\x31\x98\xf7\xdd\x3d\x54\x16\xc6\x59\x7f\xa0\xe8\x5c\xeb\x48\x4b\x0f\xf1\x3a\x0b\xe5\xad\x7e\x23\x12\xc7\xd6\xe7\x41\x2c\x30\x5c\x67\x12\x98\xdf\xbc\x47\xae\x8b\x09\x4d\x88\x08\x36\xea\x78\x14\xdb\xa0\x87\x8b\x57\x50\x01\x52\xb2\x75\x49\x23\x50\x0b\xb5\x1a\x09\x58\x09\xcc\x88\x2a\x84\x76\xba\xad\xa4\x36\xd4\x45\x25\xc2\x4c\x66\x9d\x11\x17\x97\x49\x5a\x62\x68\x03\xa4\x25\x9e\x17\x23\xb7\x34\x8b\x28\xcf\x04\x24\x7d\x1d\xa3\x49\x11\x31\xa5\x12\x7c\x9b\x4d\x11\x25\x72\x3c\x1a\x36\x97\x05\x23\xc2\xf8\x4a\x16\x9a\x00\x55\x44\x89\x26\x20\xb9\xc8\xb5\x49\x20\x87\xe2\x3a\x32\x4b\xe4\x90\xbb\x52\x31\xf9\xee\x29\xb5\x2a\xe8\x94\x7e\x19\x84\x99\xb3\x52\x95\x4e\x99\xf2\xea\x7f\x13\x37\x6c\x9f\x2c\xbd\xe3\xd7\x10\x36\xf8\xad\xd6\x40\x1c\x6c\x6f\x0a\xe2\x06\xdf\xea\x0b\x6e\x3f\x90\x79\x3b\xe8\x6d\x09\x91\x5e\x61\x00\x2d\x3f\xcf\x81\x59\x6f\x45\x1b\x34\x7a\xb1\xc7\xf1\x4c\x30\x6d\x7d\x07\x29\xd0\xce\x0f\x4a\x6a\x06\x68\x00\xec\xec\x64\xbe\xbb\x9a\x45\x8c\x34\x58\x2c\x5e\x61\xaf\x20\x58\xc6\x3b\x6d\x7f\xf3\x9a\x7c\xc1\xaa\x16\x28\x48\xe8\x71\x9b\x97\x51\xb4\xdd\xec\x40\x52\xde\x04\xae\x54\x82\x65\x08\x5e\xf3\xf5\x35\x85\x37\xce\xc8\x20\x15\x04\xdb\xdd\xb3\xcd\x96\x20\x6e\x9e\xef\x76\x18\xf0\x09\x6d\xbe\xd9\x8a\x04\x1c\x53\x33\x84\xb5\x01\x4d\xe2\xcb\x12\x86\xf4\x10\xc8\x24\xa8\x0c\x41\xa8\x4b\x0d\xb7\x70\x2e\x0a\xbd\xe6\xc6\xb6\x58\xef\x36\x18\x99\x0d\xba\x17\x84\x4e\x74\x08\xea\x52\x23\x4c\x54\xee\xb4\x8d\xcc\x50\x22\x6c\x4f\x97\x69\xeb\x91\x74\xe2\xea\xea\x32\x62\x2e\xbb\x10\x48\x72\x0f\x1a\x68\x38\xf1\x5e\x67\x10\x8b\xf4\x45\x5a\x35\x7c\xc9\x1d\xa8\x32\x4b\x3b\x4f\x2b\xc5\xd6\x24\x26\x1b\xaa\x68\xf3\xc7\xfc\x5a\x72\x31\x57\xf0\xb8\xc4\x9e\xa1\xc3\xb9\xdb\xd1\x08\x45\x4a\xd1\xd3\xe8\xfc\x8d\x0c\xfd\x76\x9f\xc6\x4d\xb5\x31\xe2\xd9\xfc\x75\x8b\x80\x26\x56\xad\x80\x2e\xc2\xe2\x22\x7b\xeb\x18\xe2\xcd\x4b\x52\x9e\x0a\x81\xb2\x18\xdc\x07\x26\x1b\x14\x54\x73\x68\x2a\x90\x68\xae\x80\xb2\x25\xf2\x7c\x02\x8e\x4b\x92\x6f\x0a\xa1\x16\x6e\x30\x92\x08\xb4\xa4\xdf\x1c\x4c\x2a\x4f\x57\x55\x0d\x5e\x27\xe2\xea\x46\x1a\x61\x51\xdf\x83\xa1\xfb\xa8\xab\x30\x10\x4c\x58\x31\x83\x02\xac\x42\x1c\xab\x84\xeb\xfc\xec\xa8\x08\x64\x39\xd5\xc6\xf5\x2e\x04\x0a\xd9\x15\x25\x60\xc8\xa2\x16\x1a\x65\x8a\xa2\x10\xf0\x93\x27\x5c\x3e\x1a\xbe\x22\xe0\x10\x70\x3d\x4b\x7f\x25\x03\x02\x02\x45\x82\xd4\x54\x1b\xf3\x26\x3d\x2e\x92\xac\x7a\x02\x00\xe4\x30\xbd\xe4\x1c\xda\x77\xf5\x7d\x71\x66\x2b\xe9\x6a\xa4\x3b\xaf\xe8\x59\x91\x24\x12\x4c\x41\xa7\x87\xdc\xcd\x43\x84\x50\x5c\xae\x73\x26\x31\xb8\x6e\x18\x49\x01\x81\x40\x8f\x3f\x8d\xf2\x47\xde\x9d\x99\xa1\x83\xb9\xeb\x69\xb6\xf8\x6b\x70\x68\x9e\x31\x2a\xc7\xa1\x3b\x91\xf7\xcb\x16\x02\x55\xe1\xdc\x2f\x06\xa6\x0d\x09\xc8\xa6\x1a\x2b\x71\x99\xac\xe5\xda\x38\x0d\x96\xf4\xb1\x38\x56\x00\xb1\x1a\x49\x59\x5d\x86\xf4\x68\x61\x76\x38\xb2\xca\x9f\xee\xd8\x47\x4f\xe0\x07\x4c\x00\x6d\x6b\xb3\xe1\x79\xd2\x10\x5a\x02\xfb\x84\xdf\x6a\x34\x07\xd1\xe7\x43\x6c\xba\x7e\x9e\x37\xc1\x08\x66\x55\x89\xc5\x0d\x70\xb9\x7b\x2a\x47\x37\xb4\xe5\x43\x3a\x7c\xec\x02\x13\xa2\x0a\xe6\x47\xe7\x13\x1f\x0f\x4e\xd4\x2b\xb8\xf9\xf2\x26\xda\x64\x19\x19\x0c\x0d\xd1\x39\x3c\x9d\xd8\x5c\x60\x78\x7d\x15\x0b\xd9\xe3\x74\x27\x96\x6d\x06\xc5\x12\xc3\x6a\x16\x26\x48\xce\xb4\x0e\xa3\x07\x3a\x0c\xfa\x03\xd3\x2b\x08\xde\x68\x04\x48\x24\xf5\x32\x33\xe2\x14\x73\x16\xf3\xe8\xdb\x67\x8c\x66\x28\x0e\xc0\x8a\x64\x10\x98\x85\x3e\xf6\x67\x75\xc4\x4c\xa2\xb4\x2a\x26\x14\x02\xdb\x56\x8a\x25\x64\xd0\xd5\xd4\xe9\x07\x87\x84\x6d\x32\x2c\x77\x29\xfa\x5b\xf5\xba\xd0\xef\x33\x1b\x99\xbd\x5e\xb7\xc7\x1e\x2f\x15\x7a\x62\xa7\x3b\x10\x85\x5f\x37\xfb\x03\xdf\x1b\xdf\xd3\xb6\xd0\xab\x9f\xe7\x3b\x83\xe0\x3a\x8b\xb7\xbe\x37\x7c\xbd\xde\xdd\x8a\x7a\x11\xce\xc3\xe6\xa5\x06\x7d\xdb\xe6\x07\xf5\xf3\xbe\xb7\xad\xee\xb9\x66\x87\xbe\xe7\x5b\xad\xee\x25\xdf\xfb\x86\xd0\x6a\x5e\x14\x7a\xdb\x62\xb3\xb3\xd1\x0d\x69\x81\xfd\x26\x90\x93\x41\x8f\xef\xf4\xf9\xfa\xa0\xd9\xed\x88\x1b\x7c\xb3\x25\x34\x82\x3a\xd1\xea\xd6\x2f\x04\x3d\x6f\x76\x2e\xf2\xad\x66\xc3\xd7\x70\xfd\x3c\xdf\x3b\x27\x88\xbd\xad\x4e\xd8\xab\x80\x31\x74\xbf\x1e\xf4\xf8\x86\x20\x76\xba\xa2\xd0\xde\x1c\x6c\x47\x3a\x82\x73\x4a\x7e\x25\x8b\x4a\xe3\x29\x98\x23\x14\x38\xfd\x2c\x59\x43\xba\x12\xe1\xe2\x40\x2e\x32\x13\xad\x10\xb6\x31\x82\xf7\xb0\x5f\x74\xcf\x36\x8c\x39\x1d\xbd\xc9\xe1\xbe\x1c\x66\x62\x75\x7e\x0f\x33\x61\xa0\xc2\x9d\x83\x13\x32\xe1\x27\x3f\x33\xb0\x38\xf2\x1f\xcc\xa9\x6a\xb5\x98\x6a\x91\x6a\x12\x91\x18\x40\x86\x29\x3d\x23\x7d\x4c\x2f\xbc\x4e\x13\xc7\xa1\x6b\xc3\x94\x4a\x57\x3a\xb4\x14\x71\xf3\x24\xf0\xf7\x5e\xa3\x47\x3e\xba\xaf\x4c\x30\x2d\x8b\x8b\x93\x7f\x5f\x17\xbf\xdc\x15\xc3\x85\x0f\x24\xa0\xd2\xf8\xae\x98\x7a\x41\x04\x0c\xe8\x43\x49\xfc\x64\x43\x28\x8b\x69\x09\x28\x60\x07\x86\xae\xc4\x52\xdb\xd6\xa5\xc6\x13\x61\x31\x38\x5d\x3a\x0a\x63\xec\x21\xd7\xb8\x6a\xf7\x9e\x60\xcb\x1d\x73\xae\x02\x09\xf3\x6f\xde\xcb\x40\x42\xfe\xc7\x02\x9c\x00\x45\xda\xe1\x29\x64\x0c\xa2\x50\xbb\xc1\x4c\xfa\x59\xc1\x8c\x4d\x5a\x4b\x71\x62\xa0\x5e\x89\xba\x58\xba\xcb\xde\x75\x1e\x6f\xac\x17\x43\x46\x10\x51\xe8\xa7\xce\x8f\x81\xfc\xf8\xf2\xf0\xf1\x4d\xe7\x17\xf7\x82\x15\xc2\xb5\xf2\xcb\xe4\x8a\x26\x4b\x17\x75\xf5\x39\x86\x72\xc7\x54\x27\x56\xf3\xd7\xac\xff\x6e\xac\xfd\x2f\x00\x00\xff\xff\xaa\xa4\x0e\x6a\x92\x8f\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
