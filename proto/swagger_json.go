package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xdb\xc8\xf1\x7f\xef\x4f\x41\xf0\xff\x7f\x79\x8d\xd2\xb4\xe8\x8b\xbc\x53\x24\x3a\x11\x4e\xb6\x0c\x49\x4e\x1a\x14\x01\xb1\x26\x47\xf6\x5e\x44\x52\xd9\x5d\xda\x16\x02\x03\x49\xd1\xa6\x57\xb4\xd7\x1c\x70\xbe\xb4\x87\x3b\x5c\x73\xe8\xd3\x01\x05\x92\x02\x77\xad\x7b\x0e\x82\x7c\x19\x8b\x76\xbe\x45\xc1\x25\x25\xf1\x59\x7c\x90\x1c\x2a\xd0\x02\x09\x2c\x2e\x77\x76\x66\x76\x7e\xbb\x33\xc3\x21\x1f\xae\x09\x82\x48\x0f\xd0\xee\x2e\x10\xf1\xba\x20\x5e\xbb\x72\x55\xfc\xc0\xbe\x86\xf5\x9e\x21\x5e\x17\xec\x7e\x41\x10\x19\x66\x7d\xb0\xfb\x07\xc4\x60\x46\x45\xc3\x0a\x31\x64\x0d\xf5\xfb\xb2\x49\x81\x50\xd9\xb9\xcc\xff\x76\xfe\xbf\xc2\xaf\x70\x52\x82\x20\xee\x03\xa1\xd8\xd0\x6d\x02\xee\x9f\x82\x6e\x30\x81\x02\x13\xd7\x04\xe1\x88\x4f\xa8\x18\x3a\x35\x35\xa0\xe2\x75\xe1\x17\xce\x28\x34\x18\xf4\xb1\x82\x18\x36\xf4\xca\x47\xd4\xd0\xed\x7b\xef\xf1\x7b\x07\xc4\x50\x4d\x25\xe5\xbd\x88\xed\xd1\xa9\x24\x95\xfd\x1f\x73\x0e\x2b\x70\x88\x29\xab\x0c\xf6\x0c\x1d\x26\xbd\x82\x20\xee\x02\xf3\xfc\xb4\x95\x63\x6a\x1a\x22\x43\x9b\x77\xeb\x2f\x8f\xac\x3f\xff\xed\xfc\xf8\x5b\xeb\xe3\x13\xeb\x4f\x2f\x47\x9f\xfe\xdd\xfa\xee\xdb\xd1\x93\xdf\xff\xc8\xfa\xed\xef\xac\xaf\x4e\x47\x4f\x4f\x5c\x81\xf9\x40\x63\x00\x84\x33\xd4\x50\xed\xc1\xdb\xb6\x5a\x3a\x40\xf6\xb1\x02\x72\x6d\x0f\x94\xfb\xf6\x95\x1b\xc3\x2d\xce\x81\x67\x1c\x01\x3a\x30\x74\x0a\xd4\xc7\x87\x20\x88\xd7\xae\x5e\x0d\x5c\x12\x04\x51\x05\xaa\x10\x3c\x60\xae\x7a\xab\x02\x35\x15\x05\x28\xed\x99\x7d\x61\x4c\xe9\x8a\x87\xbc\x23\x93\xb2\x07\x1a\x0a\x11\x13\x04\xf1\xff\x09\xf4\x6c\x3a\xff\x57\x51\xa1\x87\x75\x6c\xd3\x75\x97\x34\xc8\x73\xdb\xa5\x2e\xfa\x68\x1c\x79\x7e\x1d\x79\xa7\x15\x55\xe8\x21\xb3\xcf\x66\x8b\xa0\x0b\xa6\x0e\x87\x03\x50\x18\xa8\x02\x10\x62\x90\x89\x24\x45\x05\x21\xa6\xce\xb0\x06\x92\x4d\x34\x81\xef\xb5\x08\x09\xc4\x01\x22\x48\x03\x06\x64\x6a\x76\x4e\x0b\x88\xa3\x23\x8d\x43\x45\x31\x4c\x9d\x91\xa1\xac\x18\x6a\x88\x6f\xcc\x25\x7d\x60\x02\x19\x06\xbb\x08\x3c\x30\x31\x01\xdb\x66\x7a\xa8\x4f\x21\xd0\xcd\x86\x03\x4e\x9d\x32\x82\xf5\x5d\x31\x4e\xdb\x31\x3c\x0d\x02\xc6\xb6\x38\x66\x26\x7f\xdf\xf3\xa8\x90\xa1\xdd\xa0\xf2\x7c\xb8\x98\x52\xb8\xb7\xe6\xa5\xe3\x8a\x36\x05\x2f\x56\x41\x67\x98\x0d\xf3\x20\xf7\xe2\xf4\x9f\x67\xaf\x5e\x67\x46\x6a\x63\x3c\xe5\x32\x41\x75\xcc\xf4\x0a\xab\x6e\x5b\x61\x35\x27\x33\x07\xea\xfb\xb0\x6d\x78\x9d\x9a\x19\x5b\xc6\xc5\x1f\x4e\x46\x4f\x9f\x39\x5b\xc6\xd9\x9b\x6f\xac\xc7\x2f\xd3\x6e\x19\x37\x81\x71\xec\xd9\x93\x2d\xc1\x66\xe1\x61\x77\xb5\x4d\xb8\x2d\x06\x05\x26\x5e\x1c\x0a\x02\xbd\x3d\x83\x68\xc8\xd6\xac\x88\x75\xf6\xb3\x9f\x5e\x32\x48\x2a\x2a\xf4\xf1\x3e\x90\xd4\x07\xac\x17\x2d\xd6\xf1\x7f\x2e\xbe\xff\x47\x2e\xcc\xd4\xdd\x69\x97\x0c\x3b\x5e\xb6\x57\x18\x72\x5b\xb9\x31\x94\xe2\xcc\xb3\x57\x58\x1e\x03\x41\x5e\x04\xdb\x58\x67\x60\x07\xde\x49\x7c\xff\xe4\xda\x42\xb0\x3f\x1e\x2d\x0e\xcc\x78\x54\x9f\xbd\x79\x61\x1d\xff\x90\x1f\xd5\x1b\x86\x8a\x7b\xc3\x65\x04\x76\x34\xe7\x2b\x6c\xbb\x2d\x06\x31\x3b\x86\x1a\x82\x82\x83\x92\xa8\x1e\x0f\x48\x18\x31\x83\x18\x99\xeb\xb2\x3d\x30\x81\xb2\x34\xd2\x2f\xee\x44\xc5\xfa\x3e\x66\xe0\x44\x18\x69\xa3\xd6\xe7\x3f\x58\x9f\xbc\x78\xfb\xcb\x47\x17\x2f\x4f\xce\x9f\x3f\x76\xce\x58\xe7\xe7\xd9\xe9\x69\x0e\x77\xf4\xc6\xb0\xc1\xb9\xa8\xf9\xc3\x9c\xd2\xa2\xd0\x65\xdd\xcb\xf6\x0a\x82\x6e\x8b\x81\xa0\xd7\xcc\xde\x8f\x80\x2d\x5b\x8e\x36\x1c\xb6\x65\xcf\xce\xfa\x10\xb3\x34\xf9\xd9\x30\xd7\x2b\xac\xb8\x6d\x95\xf5\xb9\x74\xe4\xf6\x8d\x5d\xce\xf5\xc3\x34\x7e\xe6\xf9\x17\xaf\x46\xaf\x3f\x4f\x0b\xcf\xa6\x4d\xda\xbe\xb2\x0c\xa8\x9c\x30\xbb\x02\xa3\xdb\xca\xea\x3b\x7a\x56\xea\xdd\xba\x8b\x1a\x10\x65\x0f\xe9\x8c\x56\x10\xa5\x86\x82\x11\x83\x0a\xdd\x33\x06\xf2\x8e\x49\xb1\x0e\x94\xa6\x85\xd5\xe8\xf3\x27\xd6\xc7\x27\xa3\x5f\x7f\x77\xf1\xf8\x78\x74\xfa\xc7\xb7\x9f\x25\xf9\x8c\x1b\xe3\x59\x27\xc1\xdb\xf8\x42\x75\xcc\x45\x67\xcf\x18\x2c\x03\xe6\xa2\x39\x5f\x01\xd0\x6d\x65\x05\x60\xdc\xb2\xcd\x0d\x8d\x41\x13\xcf\x83\x48\x53\xc5\x2c\x35\xfe\x5e\x7c\x63\x3d\xff\xaf\x83\xc2\x0f\x2e\xde\x1c\x8f\xbe\xfc\xda\xb9\x74\xfe\xea\x33\xeb\xeb\xaf\x72\x81\x71\x03\x31\x20\x18\xf5\xab\x9c\x91\x65\x02\xa3\x8f\xf3\x15\x18\xdd\x56\x7a\x30\x06\x96\xad\x4c\x60\xd4\x5c\xd6\xb2\xc5\x86\x0e\x1e\x2f\xfe\xfd\x2b\xeb\xd9\x17\x59\x20\x78\x13\x58\x48\x29\xcb\x00\xc0\x28\xbe\x57\xf0\x73\x5b\x0c\xfc\xc6\x96\xb5\x90\xac\xff\x02\x1f\xf8\xa5\x00\xd5\x34\xf1\x6f\xd0\x59\xae\xa3\xf5\xf4\xd3\xb3\xd3\xbf\x66\x87\xca\x52\xe2\x64\x05\x92\xa5\x3f\xa3\xca\x70\x3c\x0d\x10\xa5\x07\x06\x51\x2b\x04\x28\xa4\x76\x15\xdf\xfe\xe6\x93\xf3\xd7\x2f\x9c\x3c\xc8\xe8\xe5\x93\xf3\xe7\x8f\xd3\x66\x43\xb6\xdc\xf9\xda\x7c\xba\x25\xc0\x99\x8f\xe1\x15\xc6\xdc\x56\x56\x8c\x05\x56\xeb\xdd\x66\x46\x08\xec\x62\xca\x78\xa5\xfa\xc3\x54\xc7\x98\x53\x9f\xed\x3c\x0d\x48\x0b\xa8\xf6\x78\x92\x25\xc0\xd2\x98\xd7\x15\x8c\xdc\x56\x56\x18\x4d\x17\xea\xdd\x22\x88\x32\xc4\x20\x5b\x72\xde\xfa\xf2\x7b\xeb\xd9\xbf\x1c\x0c\x39\x07\x94\xf5\x28\xf5\xe9\xb4\x3d\x50\x11\x03\xfb\x12\x4f\xaf\x76\xec\xe9\x97\x01\x58\x51\x7c\xaf\x40\xe6\xb6\xb2\x82\x2c\x7a\xd1\x2e\x17\x70\x93\xf7\x99\x3c\xdc\x4d\xdf\x3e\xe2\x6f\x45\xed\x98\xbd\xaa\xee\xab\xac\x1c\x47\x86\xc6\xce\x47\xa0\x4c\x9d\x38\xfb\xf6\x01\x10\x86\x03\xf0\xe0\xf7\xcb\x26\xe9\x07\x41\x13\xf7\xb4\xcf\xbb\xaa\xfb\xa8\x6f\xc2\x8c\x81\x3e\x33\x9e\x06\xa6\x3b\x43\xe6\x11\xfc\x28\x72\xa7\xf1\x19\x5c\x01\x11\x21\x40\x20\xb5\x7c\x81\x02\x1b\xdf\xb8\xa8\x7a\xbb\xf8\x6a\x3b\x2f\x55\x0d\x28\x45\xbb\xb3\xf4\x16\x39\x54\x05\x86\x70\x3f\xb4\xc1\x8d\x87\x22\x42\x90\x1f\x1c\x22\x66\xa0\x05\xef\x8f\xb5\x7c\xaf\x49\x45\x43\x3a\x72\x9d\x92\x5f\xe9\x2a\xb0\x70\x8a\xa1\x69\x86\x1e\x94\x36\xe9\x65\x15\x3e\x20\xbc\xb9\x7a\x75\x88\xa9\xcc\xdf\xd7\x8b\x53\xe2\x8e\x61\xf4\x01\xe9\xb1\x86\xeb\x76\x67\xd2\x49\xe8\xdd\x99\x52\x28\x25\x81\x71\xff\x90\x42\xdc\x86\x21\x94\xe8\xdb\x30\x5e\x50\x16\x0d\x1c\xba\x9b\x1a\x34\xf1\xb2\x49\x1a\xc2\xfd\x62\x22\xe9\x0c\xf4\x58\xfb\xc9\xc0\x4a\x62\x3a\xb5\x14\x26\xe2\xc5\x8d\xff\x85\x97\x59\x24\x43\x82\xf1\x72\xdd\x94\x5a\x89\xad\xd4\x5b\x72\xa5\x4c\xde\xe5\xc9\xa0\x87\xc8\xa2\xe1\x65\xd0\xc3\xbc\x4e\xa5\x89\xe6\x7c\x85\xdf\x59\xcf\xa7\x84\x92\xb6\x65\x50\xe6\x9c\x8d\x6a\xe9\x8c\x69\x5e\xf2\x37\x68\xdd\x09\xa5\xba\x8e\xa4\x21\xc9\x03\x6e\xab\x08\xba\xa9\xf9\xbc\x77\xb1\x2e\xad\x57\xb7\x9b\x5d\xb9\x7b\x77\x4b\x92\xd7\xab\xcd\x8e\xe4\x8d\x42\x7d\xbd\xdd\xf6\xb6\x34\x66\x6b\x12\x12\x78\x82\xb9\x28\x5a\x61\x9e\x79\x04\x72\x63\x38\x4e\x9f\x15\x59\x2f\x1e\xad\xcb\xf7\xb1\xae\x66\x50\x30\x9f\x7f\xeb\x40\xfd\xd0\x1e\x16\xb9\x62\x10\x38\x53\x67\x51\x74\xce\xe0\x48\x52\xc1\x0a\xdd\x59\xa4\x36\x8c\x1d\xdc\x07\xa7\xb2\x36\x9a\xe0\x41\x48\xd6\x1c\x47\xb5\x4f\x07\xb9\xcc\x66\xa3\x75\xa3\xd1\x94\xe4\xad\x5b\xad\x4d\x9f\xc1\x48\x1b\xd5\x46\x33\xd1\x48\x7c\x23\x63\x58\xeb\x1a\xf7\x41\x2f\x14\x07\x06\x08\x14\x52\x54\x7e\x70\x6d\xdd\xa9\x7b\x95\x73\x5b\x6a\x37\xd6\xef\xca\xb5\x56\xdd\xa7\xb3\x6e\xeb\x43\x69\x33\x51\x67\x36\x9d\x18\xe6\xbc\x75\x79\x85\xa1\xc4\xfc\x92\xce\xb2\xd6\xa9\x76\xd2\xda\xea\x2c\x62\x9e\x7d\x21\x92\xe4\x3e\x10\xdc\x1b\x06\xdf\x15\x49\x45\xfa\x36\x1f\x1a\xef\x8f\x47\x9a\xcc\x4c\xe1\xf9\xa0\xd4\x96\xe4\x2b\x77\x2d\xdd\x41\xe5\x86\x75\xf2\x5c\xc1\xe3\x51\x7b\x01\x81\xe7\xbe\x8f\x26\x18\x52\x0e\x49\x93\x0b\xf4\x0a\xc8\xed\x2d\xb7\xc8\x95\x99\x0a\x94\x4c\x78\x55\xc0\x2b\x67\x17\x40\x17\x53\x79\x52\x9e\x7b\x09\x69\x89\x19\x35\xad\xa5\x40\x59\x0a\xee\x23\xab\xc9\x4a\x6a\x39\xbc\xd6\x53\x36\x17\x40\xd9\x56\xf9\x7c\xb2\x11\x33\xaa\x2b\x4b\x61\x16\x5e\x30\xb2\x04\xb4\xe4\xcf\xce\x66\xd5\xa7\x67\xa8\x0e\x87\x4c\x5e\xdc\x4a\x63\x2a\x1b\xfb\x10\x9b\xc8\x5e\xc4\x06\xe1\xcb\xdd\x14\x30\x80\x45\xa8\x63\x91\x70\x1d\x17\x07\xc8\x48\x55\x73\x3d\x39\xd8\x03\xd4\x67\x7b\xb2\x82\x88\x2a\xeb\xb1\x99\x91\x24\x0a\x11\x9f\xa5\x12\xe6\x63\xe1\x0b\x02\x0e\x43\x87\x45\xe4\x55\x08\x20\x06\x32\xc3\x5a\xae\x27\x23\x26\x7f\x5e\x97\x6d\x78\x06\x00\xcc\xe1\x78\x99\x73\xfe\x34\xea\xa1\x79\xd6\x68\xa4\x35\x1e\x18\x88\x48\x32\x29\xa6\xa4\xc7\xc3\xdc\xb7\x87\x04\xa5\x78\x5c\xe7\x42\x6a\xf0\xbc\x42\x9a\x03\x02\x91\x1e\x7f\x1e\xe3\x4f\xfc\xf0\x41\x01\x01\xe7\x6e\xa7\xc5\x72\x86\xd1\xe9\x64\xdf\xa6\x72\x19\xb6\x93\xf8\x71\x90\x52\xa0\x2a\x9e\x7b\xff\xc2\xe4\x4a\xf8\xd4\xda\x52\xb5\xeb\x4b\xee\x6c\x6f\xd5\x03\x57\xea\x52\x53\xf2\x5f\xa9\x6e\xd7\x1b\xdd\xc4\x04\x90\x4b\x37\xcc\x73\x64\x15\x62\xc9\x7c\x9b\xf9\xe4\x2c\xa3\xab\x63\x4b\x6e\x52\xc1\xea\xb6\x22\x2b\x43\x81\xc8\x6e\x45\x51\xe6\xdd\x94\xc2\xe1\x22\x82\x8b\xcb\xdc\xe2\x67\x25\xe8\x53\xa9\x61\x31\xce\x22\x56\x0b\xf9\xc6\xfc\xc1\x30\xe1\x1f\x8c\x5e\x40\x40\xad\x33\xa4\xb0\xdc\xae\x7f\x42\x69\x4f\x7e\x7d\x0d\xc2\xcf\x7e\x92\x19\x4a\x03\xb0\x32\x6d\x08\xbe\xe0\x8b\x86\x4b\x1d\x53\x56\x2e\xdb\x03\x33\x2a\xc1\x3f\x57\x0e\xb7\x3e\xea\x5b\x4c\xf9\x17\x87\xc5\x25\x7e\x67\x1f\xa5\x9d\xed\x5a\x4d\xea\x74\x7c\x0f\x97\xda\xed\x56\xdb\x77\xb8\x76\xa4\xb6\xbc\xd9\xea\xca\xd2\xcf\x1b\x9d\x6e\xa8\x27\x74\x75\x43\x6a\xd7\x6e\x55\x37\xbb\xd1\x63\x26\xbd\xa1\x9e\x6a\xad\xd6\xda\x4e\xea\x88\xe7\x61\xeb\x4e\x9d\xf7\x6e\x54\xbb\xb5\x5b\xa1\xde\x66\xeb\x66\x63\x93\xf7\x57\x9b\xcd\xd6\x9d\x50\x7f\x5d\x6a\x36\x6e\x4b\xed\xbb\x72\x63\x73\xbd\x15\x33\x83\xff\x9e\x48\x4e\xba\xed\xea\x66\xa7\x5a\xeb\x36\x5a\x9b\xf2\x7a\xb5\xd1\x94\xea\x89\xde\xc6\x58\xf5\xe1\x15\x4d\x2a\x24\x2d\x99\xd7\x11\xb9\xd7\xcf\x70\xa2\x3d\xa5\xd8\x69\xec\x3b\xb1\x16\xba\x14\x1b\x51\x02\xef\xc1\x98\xa1\xc8\xae\x31\xff\xd5\x9b\x7c\x5d\x32\xc5\xa9\x18\x49\x40\xe3\x61\xac\x9c\xdb\xc7\x40\x04\x82\x55\xd6\x19\x8a\x5a\x41\x95\xf3\x12\xe8\xa3\x1d\x88\x75\x6e\xd2\x57\x1f\xa5\xf9\xbe\x51\x20\x1f\x1b\x5d\x96\x9f\x64\x77\xfe\xfa\x93\xb4\x66\x57\xc6\xfc\x2b\x52\xb8\x37\x3b\x3b\xbf\x12\x39\x7a\xe5\x9b\x4f\xee\x79\x2f\x7d\xf3\xf9\x3f\xfd\x70\x7d\xfe\xbc\xcb\x53\x4a\xb7\xbe\x54\x49\xef\xc0\x71\x5e\xe8\x34\xce\x56\x21\xed\x7d\x8a\x30\x5b\x96\x5c\x39\xb7\x35\xfb\xdf\xd1\xda\xff\x02\x00\x00\xff\xff\xea\x36\x83\xbe\xa4\x68\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
