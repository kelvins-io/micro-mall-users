package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\x1b\xc7\xf1\x7f\xaf\x4f\x71\xb8\xff\xff\x65\x6a\xba\x6e\xd1\x17\x7e\x47\x93\x27\x9b\x08\x25\x0a\x24\x65\xd7\x28\x8c\xc3\xea\x6e\x29\x6d\x7c\x0f\xf4\xee\x9e\x6c\x22\x10\x60\x15\xad\x9b\xa0\x4d\x1d\x20\x8a\xdb\x20\x41\xe2\xa0\x4d\x1a\xa0\x80\x5d\x20\x69\x95\xc8\x70\xfd\x65\xc4\x93\xfc\x2d\x8a\xdb\x3b\x92\x7b\x8f\xbc\x07\x52\xbe\x33\xb8\x40\x02\xf1\xf6\x76\x76\x66\x76\x7e\xbb\xb3\xb3\xb3\xe7\xf7\xd7\x04\x41\x24\xf7\xc1\xee\x2e\xc4\xe2\x55\x41\xbc\x72\xe9\xb2\xf8\x8e\xf3\x0c\x19\x03\x53\xbc\x2a\x38\xf5\x82\x20\x52\x44\x35\xe8\xd4\x0f\xb1\x49\xcd\x9a\x8e\x14\x6c\xca\x3a\xd0\x34\xd9\x22\x10\x13\xd9\x7d\xcc\xfe\x76\xff\x7f\x89\x3d\x61\xa4\x04\x41\xdc\x87\x98\x20\xd3\x70\x08\x78\x7f\x0a\x86\x49\x05\x02\xa9\xb8\x26\x08\x07\xac\x43\xc5\x34\x88\xa5\x43\x22\x5e\x15\x7e\xe3\xb6\x02\xc3\xa1\x86\x14\x40\x91\x69\xd4\xde\x23\xa6\xe1\xbc\x7b\x87\xbd\x3b\xc4\xa6\x6a\x29\x29\xdf\x05\x74\x8f\xcc\x24\xa9\xed\xff\x9c\x71\x58\x83\x0f\x10\xa1\xb5\xe1\x9e\x69\xc0\x69\xad\x20\x88\xbb\x90\x72\x3f\x1d\xe5\x58\xba\x0e\xf0\xc8\xe1\xdd\xfe\xdb\x43\xfb\xab\x6f\xce\x8e\xbe\xb3\x3f\x38\xb6\xff\xfa\x7c\xfc\xf1\xb7\xf6\xf7\xdf\x8d\x1f\xfd\xe9\x67\xf6\x87\x7f\xb4\xbf\x38\x19\x3f\x3e\xf6\x04\x66\x0d\xcd\x21\xc4\x8c\xa1\x96\xea\x34\xde\x76\xd4\xd2\x83\x78\x1f\x29\x50\x6e\xec\x41\xe5\xae\xf3\xe4\xda\x68\x8b\x71\xc0\xb5\xc3\x90\x0c\x4d\x83\x40\xe2\xe3\x43\x10\xc4\x2b\x97\x2f\x07\x1e\x09\x82\xa8\x42\xa2\x60\x34\xa4\x9e\x7a\xeb\x02\xb1\x14\x05\x12\x32\xb0\x34\x61\x42\xe9\x12\x47\xde\x95\x49\xd9\x83\x3a\x08\x11\x13\x04\xf1\xff\x31\x1c\x38\x74\xfe\xaf\xa6\xc2\x01\x32\x90\x43\xd7\x1b\xd2\x20\xcf\x5d\x8f\xba\xe8\xa3\x71\xc0\xfd\x3a\xe0\xbb\x15\x55\x38\x00\x96\x46\xe7\x8b\x60\x08\x96\x01\x1f\x0c\xa1\x42\xa1\x2a\x40\x8c\x4d\x3c\x95\xa4\xa8\x20\xd8\x32\x28\xd2\xa1\xe4\x10\x4d\xe0\x7b\x2d\x42\x02\x71\x08\x30\xd0\x21\x85\x78\x66\x76\x6e\x09\x88\x63\x00\x9d\x41\x45\x31\x2d\x83\xe2\x91\xac\x98\x6a\x88\x6f\xc4\x24\xbd\x67\x41\x3c\x0a\x56\x61\x78\xcf\x42\x18\x3a\x36\x33\x00\x1a\x81\x81\x6a\x3a\x1a\x32\xea\x84\x62\x64\xec\x8a\x71\xda\x8e\xe1\x69\x18\x30\xb6\xe5\x31\x33\xfd\xfb\x0e\xa7\x42\x0a\x76\x83\xca\xf3\xe1\x62\x46\xe1\xce\x1a\x4f\xc7\x13\x6d\x06\x5e\xa4\x42\x83\x22\x3a\xca\x83\xdc\xf3\x93\x7f\x9e\xbe\x78\x99\x19\xa9\xad\x49\x97\x55\x82\xea\x84\xe9\x15\x56\xbd\xb2\xc2\x6a\x4e\x66\xee\xab\x6f\xc3\xb4\xc1\x3b\x35\x73\xa6\x8c\xf3\x3f\x1f\x8f\x1f\x3f\x71\xa7\x8c\xd3\x57\x5f\xdb\x87\xcf\xd3\x4e\x19\xd7\x21\x65\xd8\x73\x3a\xab\xc0\x64\xc1\xb1\xbb\x9a\x26\xbc\x12\x83\x02\x0b\x2d\x0f\x05\x81\xda\x81\x89\x75\xe0\x68\x56\x44\x06\xfd\xd5\x2f\x2f\x18\x24\x35\x15\x6a\x68\x1f\xe2\xd4\x0b\x2c\x8f\x16\xfb\xe8\x3f\xe7\x3f\xfc\x23\x17\x66\x9a\x5e\xb7\x15\xc3\x0e\xcf\xf6\x0a\x43\x5e\x29\x37\x86\x52\xac\x79\xce\x08\xcb\x13\x20\xc8\xcb\x60\x1b\x19\x14\x3a\x1b\xef\x24\xbe\x7f\x71\x65\x29\xd8\x9f\xb4\x16\x87\x56\x3c\xaa\x4f\x5f\x3d\xb3\x8f\x7e\xca\x8f\xea\x0d\x53\x45\x83\x51\x15\x81\x1d\xcd\xf9\x0a\xdb\x5e\x89\x41\xcc\x8e\xa9\x86\xa0\xe0\xa2\x24\xaa\x86\x03\x09\xc5\x56\x10\x23\x0b\x1d\xb6\x7b\x16\x24\x34\x8d\xf4\xcb\x5b\x51\x07\xc8\x50\x53\x6f\x57\xbf\xfa\xc6\xfe\xf0\xbf\x79\x7c\xcf\x75\x64\xa8\x55\x72\x3e\x79\x7e\x57\xe8\xf2\x4a\xfc\xca\x29\x6b\x88\xd0\xc5\xaf\x43\x00\x63\x10\x06\x2e\x85\x7a\xd0\x5c\x84\xb9\x8b\x6e\xf2\xb2\x1b\x18\x42\x16\xf6\xd5\x34\xa8\x38\xca\x5c\x9f\x36\xd3\x2d\x8d\xa2\x8b\xf6\x78\x91\xb1\x8f\x28\x74\x23\x00\x69\x61\xfa\xf4\x27\xfb\xa3\x67\xaf\x7f\xfb\xf0\xfc\xf9\xf1\xd9\xd3\x43\xd7\x07\x76\x7f\x9e\x9e\x9c\xe4\xd8\x2e\x5e\x1b\xb5\x18\x17\x0d\x7f\x18\xa2\xb4\xe8\xf5\x58\xe7\xd9\x5e\x81\xd8\x2b\x31\x20\xe6\xcd\xec\xed\x08\xa8\x64\x3b\x43\x09\x87\x55\xb2\x9f\x9e\xf8\x10\x53\x99\xf3\x93\x30\xd7\x2b\xac\x78\x65\x15\x95\xbd\x70\xe4\x6a\xe6\x2e\xe3\x7a\x0a\xda\xa4\x7d\xe0\xd9\x67\x2f\xc6\x2f\x3f\x4d\x0b\xcf\xb6\x43\xda\x79\x52\x05\x54\x4e\x99\x5d\x81\xd1\x2b\x65\xdd\xdb\x71\x23\xf5\x66\xb7\x73\x3a\xc4\xca\x1e\x30\x28\xa9\x01\x42\x4c\x05\x01\x0a\x6b\x64\xcf\x1c\xca\x3b\x16\x41\x06\x24\x24\x2d\xac\xc6\x9f\x3e\xb2\x3f\x38\x1e\xff\xfe\xfb\xf3\xc3\xa3\xf1\xc9\x5f\x5e\x7f\x92\xe4\x33\x6e\x4c\x7a\x9d\x06\x57\x26\x0f\xea\x13\x2e\x7a\x7b\xe6\xb0\x0a\x98\x8b\xe6\x7c\x05\x40\xaf\x94\x15\x80\x71\xc3\xb6\x30\x34\x06\x4d\x3c\x0f\x22\x2d\x15\xd1\xd4\xf8\x7b\xf6\xb5\xfd\xf4\x47\x17\x85\xef\x9c\xbf\x3a\x1a\x7f\xfe\xa5\xfb\xe8\xec\xc5\x27\xf6\x97\x5f\xe4\x02\xe3\x06\xa0\x10\x23\xa0\xd5\x19\x23\x55\x02\xa3\x8f\xf3\x15\x18\xbd\x52\x7a\x30\x06\x86\xad\x4c\x60\xd4\x3d\xd6\xb2\xed\x0d\x5d\x3c\x9e\xff\xfb\x77\xf6\x93\xcf\xb2\x40\xf0\x3a\xa4\x21\xa5\x54\x01\x80\x51\x7c\xaf\xe0\xe7\x95\x18\xf8\x4d\x2c\x6b\x29\xa7\x72\x4b\x3c\x90\x4f\x01\xaa\xd9\xc1\x9c\x49\xe6\xb9\x8e\xf6\xe3\x8f\x4f\x4f\xfe\x9e\x1d\x2a\x95\xc4\xc9\x0a\x24\x95\x5f\xa3\xca\xb0\x3c\x0d\x01\x21\xf7\x4d\xac\xd6\x30\x24\x30\xb5\xab\xf8\xfa\x0f\x1f\x9d\xbd\x7c\xe6\xc6\x41\xc6\xcf\x1f\x9d\x3d\x3d\x4c\x1b\x0d\xd9\xf2\xfa\xeb\xb2\xee\x2a\x80\x33\x1f\xc3\x2b\x8c\x79\xa5\xac\x18\x0b\x8c\xd6\x9b\x8d\x8c\x60\xb8\x8b\x08\x65\x37\x49\xde\x4f\xb5\x8c\xb9\xf7\x27\xdc\xd3\x80\xb4\x80\xea\x4e\x3a\xa9\x00\x96\x26\xbc\xae\x60\xe4\x95\xb2\xc2\x68\x36\x50\x6f\x16\x41\x84\x02\x0a\xb3\x05\xe7\xed\xcf\x7f\xb0\x9f\xfc\xcb\xc5\x90\xbb\x40\xd9\x0f\x53\xaf\x4e\xdb\x43\x15\x50\xe8\x3c\x62\xe1\xd5\x9e\xd3\x7d\x15\x80\x15\xc5\xf7\x0a\x64\x5e\x29\x2b\xc8\xa2\x07\xed\x62\x01\x37\xbd\x6f\xc8\x71\x37\xbb\x1d\xc8\x6e\x2d\xee\x58\x83\xba\xe1\xcb\x7c\x9e\xec\x0c\xcd\x9d\xf7\xa0\x32\x73\xe2\x9c\xd7\x87\x10\x53\x14\x80\x07\x7b\x5f\xb6\xb0\x16\x04\x4d\xdc\x69\x1f\x3f\xaa\xfb\x40\xb3\xe0\x9c\x86\x3e\x33\x9e\x6d\x4c\x77\x46\x94\x13\xfc\x20\x72\xa6\xf1\x19\x5c\x01\x11\x61\x80\x40\x6a\xf9\x02\x09\x36\xbe\x76\x51\xf9\xb0\xf1\xd9\xb0\x3c\x55\x1d\x12\x02\x76\xe7\xe9\x2d\xb2\xa9\x0a\x29\x40\x5a\x68\x82\x8b\xcf\x8d\x8a\xc9\x8c\x8a\xb1\x7c\xde\xa4\xa2\x21\x1d\x39\x4e\xc9\x57\x2e\x0b\x0c\x9c\x62\xea\xba\x69\x04\xa5\x4d\xba\x4c\xc6\x1a\x84\x27\x57\x5e\x87\x88\xc8\xec\x3e\x6d\x9c\x12\x77\x4c\x53\x83\xc0\x88\x35\x5c\xaf\x3a\x93\x4e\x42\x77\xdb\x4a\xa1\x94\x04\xc6\xfd\x4d\x0a\x71\x1b\x86\x50\xa2\x6f\x43\x59\x42\x59\x34\x70\xc8\x6e\x6a\xd0\xc4\xcb\x26\xe9\x00\x69\xc5\x44\x32\x28\x34\x62\xed\x27\x03\x2b\x91\x19\xa5\xa5\x30\x0d\x1e\x2f\xc6\xc0\x74\x73\x39\x97\x34\xeb\xb8\xeb\xad\xa7\x86\x0d\x80\x8c\xcc\x73\x4f\x62\x58\xba\x8c\xfa\xcc\x40\x32\x24\x18\x4b\x97\x4e\xa9\x95\xd8\x8c\xc7\x8a\x2b\x65\x9a\x36\x9e\x41\x0f\x91\x97\x23\xaa\xa0\x87\x85\xe3\xcc\x77\xc1\x25\x07\xd6\xe2\x52\x03\xab\xa0\xcc\x05\x1b\x55\xe5\x8c\x69\x51\xf2\xb7\x48\xd3\xdd\x92\xf6\x5d\x49\x43\x92\x07\xdc\x7f\x11\x1a\x96\xee\xdb\x05\x89\x4d\x69\xbd\xbe\xdd\xee\xcb\xfd\xdb\x5b\x92\xbc\x5e\x6f\xf7\x24\x7e\x37\xef\xab\xed\x77\xb7\xa5\x09\x5b\xd3\xad\x15\xb7\x29\x8e\xa2\x15\xe6\x99\xed\xe4\xae\x8d\x26\x61\xc8\x22\xe3\xc5\xa2\x1e\xf2\x5d\xff\x3d\x99\x79\x0a\x66\xfd\x6f\xdd\x57\xdf\x75\x9a\x45\x8e\x18\x0c\xf8\x26\xf3\x28\xba\xbe\x4c\x24\xa9\x60\xa6\xf3\x3c\x52\x1b\xe6\x0e\xd2\xa0\x9b\xa1\x1c\x4d\xf0\x7e\x48\xd6\x1c\x2e\x8f\x4f\x07\xb9\xcc\x66\xa3\x73\xad\xd5\x96\xe4\xad\x1b\x9d\x4d\x9f\xc1\x48\x1b\xf5\x56\x3b\xd1\x48\x7c\x2d\x63\x58\xeb\x9b\x77\xa1\x51\x68\x3f\x1d\x20\x50\x48\x51\xf9\xc1\xb5\x75\xab\xc9\x2b\xe7\xa6\xd4\x6d\xad\xdf\x96\x1b\x9d\xa6\x4f\x67\xfd\xce\xbb\xd2\x66\xa2\xce\x1c\x3a\x31\xcc\xf1\xf9\x8d\x85\xa1\x44\xfd\x92\xce\xb3\xd6\x99\x76\xd2\xda\xea\x3c\x62\xdc\xbc\x10\x49\x72\x1f\x62\x34\x18\x05\xef\xdc\xa4\x22\x7d\x93\x35\x8d\xdf\xd7\x44\x9a\xcc\x5c\xe1\x59\xa3\xd4\x96\xe4\x4b\x1b\x2e\xdd\x42\xe5\x6d\x8f\xe5\x85\x82\x87\x53\x7b\x01\x81\x17\x3e\x8f\x26\x18\x52\x0e\x49\x93\x13\x1d\x0b\xc8\xcd\xa7\xad\xe4\x8a\xf0\x05\x52\x4f\x78\x15\xb0\x0c\xe4\x25\xd0\x45\x44\x9e\xa6\x39\x5f\x40\x78\x67\x4e\x6e\x70\x29\x50\x96\x82\xfb\xc8\xac\xbc\x92\x5a\x0e\xcb\x99\x95\xad\x25\x50\x76\x54\xbe\x98\xa8\xce\x9c\x2c\xd5\x52\x98\x05\x0f\x46\x9a\x80\x96\xfc\x51\xee\xac\xfa\xe4\x9a\x1a\xf0\x01\x95\x97\x37\xd2\x88\xc8\xe6\x3e\x8c\x3d\x10\x58\xc6\x04\xe1\x8b\xdd\x14\x30\x80\x65\xa8\x63\x99\x70\x9d\x24\x59\xc8\x40\x55\x73\x9d\xc0\xec\x41\xa0\xd1\x3d\x59\x01\x58\x95\x8d\xd8\xc8\x48\x12\x85\x88\xcf\xef\x09\x8b\xb1\xf0\x25\x01\x87\x82\x07\x45\xe4\x55\x30\x04\x14\xca\x14\xe9\xb9\x4e\x98\x2c\x76\xee\x99\xad\x79\x06\x00\x2c\x60\x79\x59\x70\xfc\x34\x2a\xf9\x20\xeb\x6e\xa4\x33\x69\x18\xd8\x91\x64\x52\x4c\x49\x97\x87\x85\x4f\x0f\x09\x4a\xe1\x5c\xe7\x42\x6a\xe0\xae\xe2\xe6\x80\x40\xa4\xc7\x9f\xc7\xf8\x13\x3f\xf0\x52\x40\xc0\x85\xdb\x69\xb1\x98\x61\x74\x38\xd9\x37\xa9\x5c\x84\xed\x24\x7e\x04\xa9\x14\xa8\x8a\xe7\xde\x3f\x30\xb9\x02\x3e\x8d\xae\x54\xef\xfb\x82\x3b\xdb\x5b\xcd\xc0\x93\xa6\xd4\x96\xfc\x4f\xea\xdb\xcd\x56\x3f\x31\x00\xe4\xd1\x0d\xf3\x1c\x99\xcd\x59\x32\xdf\x66\x31\x31\xcb\xe8\x2c\xe3\x92\x9b\x54\x30\x4b\xb0\xc8\xc8\x10\x88\x65\x2f\x33\x2b\xf3\x6c\x4a\xe0\x83\x65\x6c\x2e\x2e\x72\x8a\x9f\x17\xa0\x4f\xa5\x86\xe5\x38\x8b\x48\x2d\xe4\x1b\xb3\x83\x61\xcc\x3e\x8c\xbf\x84\x0d\xb5\x41\x81\x42\x73\xbb\xfe\x09\x29\x52\xf9\xf5\x35\x0c\x9f\xfd\x24\x33\x94\x06\x60\x65\x9a\x10\x7c\x9b\x2f\x12\x4e\x19\x4d\x99\x01\xee\x34\xcc\xa8\x04\x7f\x5f\x39\xdc\xfa\xa8\x6f\x5a\xe5\x1f\x1c\x1a\x17\xf8\x9d\xbf\x94\xf6\xb6\x1b\x0d\xa9\xd7\xf3\x1d\x2e\x75\xbb\x9d\xae\x6f\x71\xed\x49\x5d\x79\xb3\xd3\x97\xa5\x5f\xb7\x7a\xfd\x50\x4d\xe8\xe9\x86\xd4\x6d\xdc\xa8\x6f\xf6\xa3\xdb\x4c\x6b\x43\x35\xf5\x46\xa3\xb3\x9d\x54\x11\xcf\xc3\xd6\xad\x26\xab\xdd\xa8\xf7\x1b\x37\x42\xb5\xed\xce\xf5\xd6\x26\xab\xaf\xb7\xdb\x9d\x5b\xa1\xfa\xa6\xd4\x6e\xdd\x94\xba\xb7\xe5\xd6\xe6\x7a\x27\xa6\x07\xff\x3b\x91\x9c\xf4\xbb\xf5\xcd\x5e\xbd\xd1\x6f\x75\x36\xe5\xf5\x7a\xab\x2d\x35\x13\xbd\x8d\x89\xea\xc3\x23\x9a\x94\x90\x5b\x32\xaf\x23\x72\xae\x9f\xe3\x44\x73\x29\xed\x69\xec\x3b\x31\xa7\xbc\x14\x13\x51\x02\xef\xc1\x3d\x43\x91\x59\x63\xf1\xa3\x37\xfd\x8a\x6e\x8a\x55\x31\x92\x80\xce\xb6\xb1\x72\x6e\x1f\x03\x60\x18\xcc\x56\xcf\x90\x1c\x0c\x55\x39\x2f\x01\x0d\xec\xc0\x58\xe7\x26\x7d\xf6\x51\x9a\xef\x44\x05\xe2\xb1\xd1\xd7\x1b\x92\xec\xce\x9f\x7f\x92\xd6\xec\xca\x18\x7f\x05\x0a\xf3\x66\xe7\xc7\x57\x22\x5b\xaf\x7c\xf3\xe9\x3b\x6f\xa5\x6f\xbe\xf8\xd3\x0f\xcf\xe7\xcf\x3b\x3c\xa5\x74\xeb\x4b\x15\xf4\xf6\xa5\x32\x97\x6c\xb2\xc9\x3b\x53\xbc\x31\x50\x2f\xc5\x5c\x1c\xdb\xf5\x7f\xfb\x2c\xdd\x58\x4f\x87\x6c\xfa\x6f\xcc\x79\x1f\x07\xfd\xf1\xc5\xf9\xb7\x87\xde\xd7\xaf\xa3\x0d\x82\xf3\xef\x0a\xb9\x67\xd9\xae\x1e\xf0\xc7\x4a\xf3\x8d\x3b\x57\x10\x76\xcd\xf9\xef\x60\xed\x7f\x01\x00\x00\xff\xff\x27\x2a\xb6\x51\x9d\x6f\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
