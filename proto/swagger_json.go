package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\x23\x35\x18\xbe\xe7\x57\x58\x86\x63\xd5\x94\x82\x38\xf4\x56\x55\x15\xea\x61\x59\x29\xd9\x4a\x48\xa8\x1a\xb9\x9e\x37\x89\x57\x33\xf6\xd4\x7e\x1d\x1a\xa1\x1e\x56\x02\xb4\x27\x38\x6c\x59\x84\x40\x2b\xf6\xc6\x09\x0e\x08\x15\x2d\x87\xfd\x33\x24\x5b\xfe\x05\xf2\x4c\x3e\x9c\xc9\x24\x9d\x7c\xb5\x89\x58\x69\xab\xa9\x3f\x1e\xbf\xef\xe3\xc7\xef\x47\xbf\xac\x10\x42\xcd\x17\xac\xd9\x04\x4d\x0f\x08\xdd\xdf\xdd\xa3\x3b\x6e\x4c\xc8\x86\xa2\x07\xc4\xcd\x13\x42\x51\x60\x04\x6e\x3e\xd1\x0a\x55\x35\x16\x5c\xab\x20\x66\x51\x14\x58\x03\xda\x04\xd9\x70\xfa\x9d\xfd\xdc\x4d\x47\x52\x28\x42\x68\x1b\xb4\x11\x4a\x3a\x80\xfe\x27\x91\x0a\x89\x01\xa4\x15\x42\xae\xd2\x03\xb9\x92\xc6\xc6\x60\xe8\x01\xf9\x3c\xdb\xc5\x92\x24\x12\x9c\xa1\x50\xb2\xfa\xd4\x28\xe9\xd6\x9e\xa5\x6b\x13\xad\x42\xcb\x4b\xae\x65\xd8\x32\x23\x4f\xaa\xed\x0f\x52\x0b\xab\x63\x0e\x12\x42\x9b\x80\xde\xaf\x8e\x15\x1b\xc7\x4c\x77\x9c\xd1\xb7\xdf\xde\x74\xbf\x7b\xf9\xee\xfa\xd7\xde\xf3\x9b\x7f\xde\xbe\xee\x3d\xfb\xbd\xef\x59\xba\x50\x25\xa0\xd3\x93\x4f\x42\xb7\xf8\x13\xc0\x53\x03\xfa\xc4\xe1\x7b\xab\x34\x98\x44\x49\x03\x66\xec\x14\x42\xe8\xfe\xde\x5e\x6e\x88\x10\x1a\x82\xe1\x5a\x24\xd8\x67\xed\x90\x18\xcb\x39\x18\xd3\xb0\x11\x19\x20\xed\x7a\xf0\x99\xc5\xbc\x05\x31\x9b\x00\x23\x84\xbe\xaf\xa1\xe1\x70\xde\xab\x86\xd0\x10\x52\x38\xdc\xfe\x4d\x79\xe6\xd6\xfa\xc0\x74\x6c\xfb\x55\xa5\xe8\xfb\xca\x73\x2d\x61\x9a\xc5\x80\xa0\x47\x17\x92\xfd\xcb\x39\x25\x59\x9c\x8a\xc8\x8a\x30\x6f\xba\x48\xdd\xbc\xb0\xa0\x3b\xf9\x29\x0d\x17\x56\x68\x70\xdc\x36\x58\x64\x20\x37\x8d\x9d\x24\x05\x35\xa8\x85\x6c\xe6\x37\x37\x94\x8e\x99\xbb\x58\x2a\x24\x7e\xfc\x11\x2d\xf4\xe5\xcc\xf3\x05\x59\x33\xef\x05\x75\xfc\x98\x3a\xe8\xb6\xe0\x1e\x37\x67\x15\x1f\xa7\xcf\xc7\x48\x5f\x31\x68\xde\x62\x12\x4d\x95\x19\xa3\xb8\x60\x08\x55\xd3\x52\x89\xaf\xb9\xc4\x4e\xd7\x5c\xf7\xfb\x6f\x7a\xcf\x6f\xba\x5f\xff\x71\xfb\xec\xba\xfb\xe6\x87\x7f\x5f\xbc\x99\xa1\xb9\x47\x83\xc3\x0e\x07\x67\xd5\xdd\x51\x5b\x20\xbf\x62\xcb\xef\x4b\x89\xe7\x2a\x9c\xd0\x5b\x26\xc5\xa2\x19\x4f\x89\xa8\x6d\x5e\x88\x2b\x75\xff\xc2\x82\xc1\x32\xde\xdf\xa5\xdd\xe1\x01\x4b\xe8\xd7\x86\x02\x4b\xcb\xf6\xb7\xd7\xbd\x5f\xfe\xca\xc4\xbb\x73\xfb\xf6\xba\xfb\xd3\xab\x6c\xe8\xdd\xdf\x2f\x7a\xaf\x7e\x2e\xa3\xe1\x47\x0c\x41\x0b\x16\x1d\xa6\xe7\x6e\x93\x86\xc7\x2c\xff\xff\x69\x38\xe7\xfe\x26\x69\x38\xee\x9b\x36\x5f\xc6\xcf\x64\x7c\xfb\xe7\x57\xbd\x97\x3f\xce\xce\xf8\x13\x1c\x6c\x83\x6e\x8b\xec\xbe\x2f\xd5\x0e\x2e\x24\xd8\xb2\x5a\xa0\x84\x16\x77\x86\x71\x52\x99\x15\xd5\x94\x5b\x29\xaf\x07\xd3\xd6\xe6\x45\xc4\x87\x08\x86\xc3\xce\xca\x33\x6f\xd4\x07\xa5\x76\x1e\xa9\x38\x56\x72\x78\x2d\x5e\x6c\x1c\xbc\x24\x75\xfe\x14\xf8\x28\x09\xbb\xce\x2b\x01\x8d\x22\x27\x36\xca\x55\x08\x79\xf9\xcd\x20\xa8\x06\x78\xe4\x76\x14\x5e\x77\x6c\x9a\x79\xa8\xdc\xc3\xae\xe4\x69\x1b\x8f\xff\x77\x07\xb7\xa5\x3c\x75\x9c\xcd\xe1\x6b\x8e\xe4\x42\x97\x73\xcd\xe8\xdc\xfa\x4a\x9b\xcd\x92\xac\x4c\x74\x7b\x5b\x4e\xc6\xb0\xd9\x2e\xe3\xff\xec\x7a\x7b\x09\x26\xfc\x7c\x36\x5b\xbc\x7e\x80\x99\x9e\x93\x7c\x42\x5c\xdb\xb8\x0e\x5c\x61\x82\x61\x6f\x3a\x0d\xfc\x5c\xa9\x08\x98\x9c\x86\x3e\x98\x5e\x86\xfb\x4d\x92\x61\x09\xeb\x0b\xab\xdc\x0d\x55\x4e\xda\xba\x05\x76\x0d\xc8\x8e\x72\x90\xb8\x82\x40\x7d\x47\xf7\xb4\x11\xb2\xf0\x1f\x23\xce\x78\x2d\x42\x22\x34\x41\xcf\xe0\xf3\xc3\xfd\xd5\xf0\xe9\x6d\x95\x70\x89\xc1\xfa\x6e\x5a\x98\x40\xb5\xd3\xbf\x0e\xdf\x5b\x80\x18\x4b\x6b\x4b\x08\x60\x1d\x74\xac\xf3\xb9\x6a\x68\x0a\x83\xa0\x03\x16\x86\x53\x09\x9f\x25\x85\x16\xb0\x08\x5b\x01\x67\x3a\x0c\xe4\x44\x12\x2d\x83\x20\x42\x90\x28\xb0\xb3\x7a\x85\xaf\xe9\xe1\x20\xbb\x9c\xdb\xdf\x39\x24\xb8\x82\x00\x7f\x6f\xc5\xdd\x86\xd7\xbb\xd3\x0d\x1f\xb4\x03\x05\x66\xe6\xde\x12\x05\x69\xe3\xb1\x96\x88\xd6\x4f\x8f\x8e\x8e\xeb\x75\xbf\x23\x3e\xae\xd5\x1e\xd7\xfc\x81\xd3\xfa\x71\x2d\xf8\xf4\xf1\x93\xe0\xf8\xb3\x93\xfa\x93\x81\x4d\xc3\x56\xcb\xb5\x48\xcc\x46\xa9\xd4\x06\x70\x93\x56\x0e\x0b\xcd\x0d\x8b\x48\x8c\x73\x65\x25\xde\x1d\x90\x0a\x77\x3b\xd7\x82\x7e\xe7\x3c\xf7\x66\x03\x97\xeb\x48\x85\x56\xa2\xee\x04\x45\x3d\x65\x19\xa3\x92\x96\x92\x0b\x6d\x84\x98\x89\x68\x21\x1a\xd6\x13\xda\x44\xb8\x54\x24\x97\x6d\x81\xd3\xf3\xf6\xe2\xf5\x40\x86\xbb\xf0\xf5\x70\x25\x91\x71\x5c\x38\xc7\xb1\xe6\x3a\xca\x2f\x0d\x0c\x21\x40\x31\xc7\x3b\x18\x8f\x67\x15\xf7\xff\xaa\xf2\x5f\x00\x00\x00\xff\xff\xb3\xaf\x44\x45\x51\x1f\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
