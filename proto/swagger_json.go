package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x8f\xdb\xc6\xf1\x7f\x7f\x9f\x82\xd0\xff\xff\x32\xf5\xb9\x6e\xd1\x17\x7e\x27\x4b\x3c\x5b\xb0\x1e\x0e\x92\xce\xae\x51\x18\xc4\x1e\xb9\xd2\x6d\xcc\x27\xef\x2e\xcf\x16\x02\x03\x76\xd1\xb8\x09\xda\xd4\x01\xe2\xb8\x0d\x12\x24\x0e\xda\xb8\x01\x0a\xd8\x05\xe2\xd6\xc9\xb9\xae\xbf\x8c\x25\x9f\xbf\x45\xc1\x25\x25\x71\xf9\x24\x3e\x88\x67\xd2\xd0\x02\x09\x7c\x5c\xee\xec\xec\xcc\xfc\x76\x77\x66\x67\xa9\x0f\xb6\x04\xa1\x46\x6e\x80\xf1\x18\xe2\xda\x59\xa1\x76\xe6\xd4\xe9\xda\x7b\xf6\x33\xa4\x8f\x8c\xda\x59\xc1\xae\x17\x84\x1a\x45\x54\x85\x76\xbd\x89\x0d\x6a\x6c\x6b\x48\xc6\x86\xa4\x01\x55\x95\x2c\x02\x31\x91\x9c\xc7\xec\xdf\xce\xff\x4f\xb1\x27\x8c\x94\x20\xd4\x0e\x21\x26\xc8\xd0\x6d\x02\xee\x3f\x05\xdd\xa0\x02\x81\xb4\xb6\x25\x08\xb7\x58\x87\xb2\xa1\x13\x4b\x83\xa4\x76\x56\xf8\x8d\xd3\x0a\x98\xa6\x8a\x64\x40\x91\xa1\x6f\xbf\x4f\x0c\xdd\x7e\xf7\x2a\x7b\xd7\xc4\x86\x62\xc9\x09\xdf\x05\xf4\x80\x2c\x47\xb2\x7d\xf8\x73\xc6\xe1\x36\x90\x65\xc3\xd2\xe9\xb6\x7c\x00\xf0\x18\x2e\x5e\xb0\x5b\x58\xd4\xf3\xa7\x2d\x1f\x4b\xd3\x00\x9e\xd8\xec\xbf\xbe\xff\xfd\xec\xa3\x67\xc7\x4f\x1f\xcd\x3e\x7a\x36\xfd\xf0\xc3\xe9\xed\xff\xb8\x63\x64\x2f\x1a\x26\xc4\x8c\x87\x96\x62\xbf\xbc\x67\x4b\x62\x00\xf1\x21\x92\xa1\x64\xff\x51\x77\xfa\x6c\x38\x5d\x7a\x1a\x62\x48\x4c\x43\x27\x90\x70\x1d\x0b\x42\xed\xcc\xe9\xd3\xbe\x47\x82\x50\x53\x20\x91\x31\x32\xa9\x2b\xd2\xba\x40\x2c\x59\x86\x84\x8c\x2c\x55\x98\x53\x3a\xe5\x21\xef\x0c\x42\x3e\x80\x1a\x08\x10\x13\x84\xda\xff\x63\x38\xb2\xe9\xfc\xdf\xb6\x02\x47\x48\x47\x36\x5d\x57\x8d\x01\xa6\xfb\x2e\xf9\x1a\x47\xe4\x96\xe7\xaf\x5b\xde\x7e\x6b\x0a\x1c\x01\x4b\xa5\xab\xc7\xa0\x0b\x96\x0e\x6f\x9a\x50\xa6\x50\x11\x20\xc6\x06\x5e\x0c\x25\xef\x48\xb0\xa5\x53\xa4\x41\xd1\x26\x1a\xc3\xf7\x56\xc8\x08\x6a\x26\xc0\x40\x83\x14\xe2\xa5\xad\x39\xc5\x37\x1c\x1d\x68\x0c\x1f\xfb\x86\x32\xf1\xf3\x8b\xf4\xa8\x1a\x0c\xaf\x5b\x08\x43\xdb\x58\x28\xb6\x60\x41\x1a\xbb\x6e\x41\x42\x93\x0c\xfc\xaa\x67\xe0\x14\x8c\xfd\x43\xe6\xec\x79\x49\xef\xea\x96\x97\x8e\x2b\xbc\x25\xce\xe0\x4d\x44\xe8\xb6\x79\x60\xe8\x1c\xc8\xc6\x30\x1a\x64\xb3\xbf\xde\x9e\x7d\xf3\x9d\x03\xb5\xd9\x5f\x9e\x4c\x3f\x7d\x34\xfb\xe1\xfb\xe9\xdd\x3f\xfe\x6c\xf6\xf1\x1f\x66\x5f\x1d\x4d\xef\x3d\x4b\x0a\xba\xc6\x01\x94\xaf\xd9\x4f\xce\x4d\x76\x19\x07\x15\xc0\x9c\x9f\xe7\x0d\xe4\xdc\x12\x01\x39\x66\xeb\x78\x22\xc9\x86\x12\xe0\xdb\x81\xde\x75\x0b\xe2\x38\xec\x8d\x80\x4a\xfc\xe0\xa3\x13\x93\x51\x27\x14\x23\x7d\x5c\x8b\x92\x76\x04\x4f\xa6\xcf\xd8\x8a\x63\xa6\x58\xf0\x22\x05\xea\x14\xd1\x49\x16\xe4\x1e\x1f\xfd\xe3\xd5\xf3\x17\xa9\x91\xda\x9a\x77\x59\x25\xa8\xce\x99\xde\x60\xd5\x2d\x1b\xac\x66\x64\xe6\x86\xf2\x2e\x4c\x1b\x5e\xe7\x61\xc5\x94\x71\xfc\xa7\x67\xd3\x7b\x0f\x9c\x29\xe3\xd5\xcb\x6f\x67\x77\x9e\x24\x9d\x32\xce\x43\xca\xb0\x67\x77\x56\x81\xc9\xc2\xc3\xee\x66\x9a\x70\x4b\x04\x0a\x2c\x54\x1c\x0a\x7c\xb5\x23\x03\x6b\xc0\x96\x6c\x0d\xe9\xf4\x57\xbf\x3c\x61\x90\x6c\x2b\x50\x45\x87\x10\x27\x5e\x60\xbd\x68\x99\xdd\xff\xf7\xf1\xd3\xbf\x67\xc2\x4c\xd3\xed\xb6\x62\xd8\xf1\xb2\xbd\xc1\x90\x5b\xca\x8d\xa1\x04\x6b\x9e\xad\x61\x69\x0e\x04\xa9\x08\xb6\x91\x4e\xe1\x18\xe2\x58\xbe\x7f\x71\xa6\x10\xec\xcf\x5b\xc7\x46\x95\x5e\xbd\x7c\x3c\xbb\xff\x53\x76\x54\x77\x0c\x05\x8d\x26\x55\x04\x76\x38\xe7\x1b\x6c\xbb\xa5\xac\x51\xa6\x28\xb5\xbd\xdd\x50\x13\x5b\x51\x47\x48\x57\x12\xbb\xab\xdf\x7c\x37\xfb\xf8\xbf\x59\xf6\x9e\x3b\x48\x57\xaa\xb4\xf9\xf4\xf2\xbb\x41\x97\x5b\xa2\x57\x4e\x49\x45\x84\xae\x7f\x1d\x02\x18\x83\x20\x70\x29\xd4\xfc\xe6\x22\xac\x5c\x74\xe3\x97\x5d\x9f\x0a\xd9\xf1\x8a\xaa\x42\xd9\x16\xe6\xce\xa2\x99\x66\xa9\x14\x9d\xf4\x8e\x17\xe9\x87\x88\x42\x27\x02\x90\x14\xa6\x0f\x7f\x9a\x7d\xf2\xf8\xcd\x6f\x6f\x1f\x3f\x79\xf6\xfa\xe1\x1d\x67\x0f\xec\xfc\xf9\xea\xe8\x28\x83\xbb\x78\x6e\xd2\x62\x5c\x34\xf8\x30\x44\x69\xd1\xeb\xb2\xee\x65\x7b\x03\x62\xb7\x44\x80\xd8\x6b\x66\xef\x46\x40\x25\xdd\x19\x4a\x30\xac\x92\xfe\xf4\x84\x43\x4c\x65\xce\x4f\x82\x5c\x6f\xb0\xe2\x96\x4d\x54\xf6\xc4\x91\xab\x1a\x63\xc6\x75\xb2\xec\x82\x2f\x9e\x4f\x5f\x7c\x9e\x14\x9e\x6d\x9b\xb4\xfd\xa4\x0a\xa8\x5c\x30\xbb\x01\xa3\x5b\xca\xea\xdb\x79\x34\xf5\x76\xdd\x39\x0d\x62\xf9\x00\xe8\x94\x6c\x03\x42\x0c\x19\x01\x0a\xb7\xc9\x81\x61\x4a\xfb\x16\x41\x3a\x24\x24\x29\xac\xa6\x9f\xdf\x65\xe9\x3a\x3f\x1c\xdf\xb9\x3f\x3d\xfa\xf3\x9b\xcf\xe2\xf6\x8c\x9d\x79\xaf\x8b\xe0\xca\xfc\x41\x7d\xce\xc5\xe0\xc0\x30\xab\x80\xb9\x70\xce\x37\x00\x74\x4b\x59\x01\x18\xa5\xb6\xb5\xa1\xd1\x6f\xe2\x59\x10\x69\x29\x88\x26\xc6\xdf\xe3\x6f\x67\x0f\x7f\x74\x50\xf8\xde\xf1\xcb\xfb\xd3\x2f\xbf\x76\x1e\xbd\x7e\xfe\xd9\xec\xeb\xaf\x32\x81\xb1\x03\x28\xc4\x08\xa8\x75\xc6\x48\x95\xc0\xc8\x71\xbe\x01\xa3\x5b\x4a\x0f\x46\x9f\xda\xca\x04\x46\xcd\x65\x2d\x9d\x6f\xe8\xe0\xf1\xf8\x5f\xbf\x9b\x3d\xf8\x22\x0d\x04\xcf\x43\x1a\x10\x4a\x15\x00\x18\xc6\xf7\x06\x7e\x6e\x89\x80\xdf\xdc\xb2\x0a\x39\x95\x2b\xf0\x40\x3e\x01\xa8\x96\x07\x73\x06\x59\xb5\x75\x9c\xdd\xfb\xf4\xd5\xd1\xdf\xd2\x43\xa5\x92\x38\xd9\x80\xa4\xf2\x6b\x54\x19\x96\x27\x13\x10\x72\xc3\xc0\xca\x36\x86\x04\x26\xde\x2a\xbe\xf9\xfd\x27\xaf\x5f\x3c\x76\xe2\x20\xd3\x27\x77\x5f\x3f\xbc\x93\x34\x1a\xb2\xeb\xf6\xd7\x67\xdd\x55\x00\x67\x1c\xc3\x1b\x8c\xb9\xa5\xac\x18\xf3\x69\xeb\xed\x46\x46\x30\x1c\x23\x42\xd9\x8d\xad\x0f\x12\x2d\x63\xce\xfd\x09\xe7\x34\x20\x29\xa0\xfa\xf3\x4e\x2a\x80\xa5\x39\xaf\x1b\x18\xb9\xa5\xac\x30\x5a\x2a\xea\xed\x22\x88\x50\x40\x61\xba\xe0\xfc\xec\xcb\xa7\xb3\x07\xff\x74\x30\xe4\x2c\x50\xb3\xdb\x89\x57\xa7\x3d\x53\x01\x14\xda\x8f\x58\x78\x75\x60\x77\x5f\x05\x60\x85\xf1\xbd\x01\x99\x5b\xca\x0a\xb2\x70\xa5\x9d\x2c\xe0\x16\xf7\x7a\x3d\xdc\x2d\x6f\xe1\xb2\xdb\xc1\xfb\xd6\xa8\xae\x73\x99\xcf\x73\xcf\xd0\xd8\x7f\x1f\xca\xcb\x4d\x9c\xfd\xba\x09\x31\x45\x3e\x78\xb0\xf7\x25\x0b\xab\x7e\xd0\x44\x9d\xf6\x79\xb5\x7a\x08\x54\x0b\xae\x68\xc8\x99\xf1\xd2\x31\xdd\x9f\x50\xcf\xc0\x6f\x85\xce\x34\x9c\xc1\xe5\x18\x22\xf4\x11\x48\x3c\x3e\x5f\x82\x0d\xd7\x2e\x2c\x1f\x36\x3a\x1b\xd6\x4b\x55\x83\x84\x80\xf1\x2a\xb9\x85\x36\x55\x20\x05\x48\x0d\x4c\x70\xd1\xb9\x51\x11\x99\x51\x11\x96\xef\x35\xa9\x70\x48\x87\xea\x89\x01\xc6\xbd\x30\x3b\x74\x58\x09\xe8\xca\x67\x0d\x35\xa8\x5b\x1a\x07\x8a\xda\xae\xd8\x1f\xf4\xba\xf5\xb6\x77\x4a\x6f\xf4\x3a\xbb\xf5\xee\x15\xef\xa3\xc1\x95\xc1\x50\xec\xcc\xd9\x5b\xe0\xcc\x33\x43\x2e\x29\x05\xb9\x8c\xbc\x18\x9a\xc3\xbc\x64\x43\xd3\x0c\xdd\xaf\x93\xb8\x2b\x6f\xac\x41\x70\x09\xf0\x6a\x1a\x11\x89\xdd\xfa\x8d\x52\xf5\xbe\x61\xa8\x10\xe8\x91\xf0\x72\xab\x93\x68\x2e\xfa\x06\x5e\x29\x84\x12\xc3\xb8\x81\xf4\xec\xf6\xd6\xe0\xed\x6a\x6f\xd0\x8c\x35\x2a\xfb\xf5\x30\x16\x38\xae\x73\x09\x2c\x38\xd7\xc4\x6e\x02\x29\xcb\xbc\x0b\x9f\x61\xc8\x38\xf1\xec\x12\x2d\x5e\x51\x03\x48\xcd\x37\x24\x9d\x42\x3d\xd2\x84\x53\xb0\x12\x9a\x7a\x5b\x0a\xeb\xf4\x42\x56\x1f\x19\x4e\xd2\x6b\x41\xd3\xf3\xe2\xe3\x04\xb6\x18\x3a\x00\xe9\xa9\x27\xe9\xd8\xf8\x7d\x19\xe5\x99\x82\x64\x60\x60\x2c\xaf\x3c\xa1\x54\x22\x53\x43\x2b\x2e\x94\x45\x7e\x7d\x0a\x39\x84\xde\x22\xa9\x82\x1c\xd6\x8e\x33\xee\x26\x50\x06\xac\x45\xe5\x50\x56\x41\x98\x6b\x36\xaa\xca\x19\xd3\xba\xc6\xdf\x22\x4d\x67\x13\x91\x7d\xa7\xd2\x14\x77\xea\x7b\xed\xa1\x34\xbc\xb2\x2b\x4a\x3b\xf5\xf6\x40\xf4\x6e\x5c\xb8\xda\x61\x7f\x4f\x8c\xdd\xc6\x84\xd0\x0a\xf2\xcc\x5c\xde\x73\x93\x79\xbc\x36\x8f\xbe\x58\x78\x48\xba\xc6\x5f\x28\x5a\x25\x60\xd6\xff\xee\x0d\xe5\xa2\xdd\x2c\x54\x63\xd0\xb7\x37\x59\x45\xd1\xd9\xcb\x84\x92\xf2\xa7\x84\xaf\x22\xd5\x31\xf6\x91\x0a\x9d\x54\xee\x70\x82\x37\x02\x63\xcd\xb0\xe5\xe1\x64\x90\xc9\x6c\x3a\xbd\x73\xad\xb6\x28\xed\x5e\xe8\x75\x39\x83\x11\x3b\xf5\x56\x3b\xd6\x48\xb8\x96\x11\xac\x0d\x8d\x6b\x50\xcf\x15\x78\xf0\x11\xc8\x25\xa8\x1c\x6e\xe7\xe5\xa6\x57\x38\x97\xc4\x7e\x6b\xe7\x8a\xd4\xe8\x35\x39\x99\x0d\x7b\x17\xc5\x6e\xbc\xd3\x79\xb9\x19\x25\x2a\x6f\x22\x68\x6e\x28\x51\x7e\xa4\xab\xac\x75\x29\x9d\xa4\xb6\xba\x8a\x98\x67\x5e\x08\x25\x79\x08\x31\x1a\x4d\xfc\x97\x93\x12\x91\xbe\xc4\x9a\x46\xfb\x35\xa1\x26\xb3\x72\xf0\xac\x51\x62\x4b\xe2\xf2\xab\x4b\xb7\x50\xb9\x1e\xba\xb4\x56\xf0\x78\xc4\x9e\x63\xc0\x6b\x9f\x47\x63\x0c\x29\xc3\x48\xe3\x33\x42\x73\x8c\xdb\x9b\xdf\x93\x29\x14\xea\xcb\xd1\xf1\x8a\x80\xa5\x6a\x17\x40\x17\x11\x69\x91\x0f\x7e\x02\x11\xa6\x15\x49\xd4\xa5\x40\x59\x02\xee\x43\xd3\x17\x4b\x6a\x39\x2c\xb9\x58\xb2\x0a\xa0\x6c\x8b\x7c\x3d\x51\x9d\x15\xe9\xbc\xa5\x30\x0b\x2f\x18\x69\x0c\x5a\xb2\x1f\x07\xa4\x95\xa7\xa7\xa9\x0e\x6f\x52\xa9\x38\x4d\x23\x22\x19\x87\x30\xf2\xe4\xa4\x88\x09\x82\x8b\xdd\xe4\x30\x80\x22\xc4\x51\x24\x5c\xe7\xd9\x28\x12\x50\x94\x4c\x47\x55\x07\x10\xa8\xf4\x40\x92\x01\x56\x24\x3d\x32\x32\x12\x47\x21\xe4\x3b\x85\xc2\x7a\x2c\xbc\x20\xe0\x50\x70\x33\xcf\x78\x65\x0c\x01\x85\x12\x45\x5a\xa6\xa3\x38\x8b\x1d\x10\xa7\x6b\x9e\x02\x00\x6b\x58\x5e\xd6\x1c\x3f\xf5\x8c\x7d\x91\xa5\x91\xd6\x1b\xe9\xcd\x1b\xfa\x3c\x92\x54\x82\x29\xe9\xf2\xb0\xf6\xe9\x21\x46\x28\x9e\xad\x73\x2e\x31\x78\xee\x2c\x67\x80\x40\xe8\x8e\x3f\x8b\xf1\xc7\x7e\x09\x27\xc7\x00\xd7\x6e\xa7\xf9\x62\x86\xe1\xe1\x64\x6e\x52\x39\x09\xdb\x89\xfd\x5a\x54\x29\x50\x15\xcd\xfd\x42\x31\x1d\x48\x41\x3e\xd3\x28\x64\xcb\x64\xbb\x6b\x66\x16\x2c\x19\xa6\x64\xaa\x80\xda\x9d\x64\x6c\xae\x40\x96\x4c\x94\x1f\x8e\xbc\xf1\x67\x3b\x5b\xef\x8b\xf5\x21\x17\x40\xdb\xdb\x6d\xfa\x9e\x34\xc5\xb6\xc8\x3f\xa9\xef\x35\x5b\xc3\xf8\x43\x78\x87\x6e\x90\xe7\xd0\xd4\xe2\x92\xed\x1f\xd7\x13\x17\x0e\x4f\x79\x2f\x39\x6c\xfd\x29\xab\x79\x34\x43\x20\x96\xdc\x34\xc1\xd4\x30\x21\xf0\x66\x11\x0e\xdc\x49\x2e\xa3\xab\x0e\x41\x12\x89\xa1\x98\x0d\x39\x52\x72\xf9\x1f\xec\xf0\x1d\xb3\x5f\x43\x29\x20\x68\xa1\x53\x20\xd3\xcc\xee\x55\x4c\xbe\x5e\x76\x79\x99\xc1\xf3\xb5\x78\x86\x92\x00\xac\x4c\x13\x02\xe7\xe0\x92\x60\xfe\x72\xc2\xeb\x08\x76\xc3\x94\x42\xe0\xfb\xca\xe0\x3a\x85\x7d\x60\x2d\xbb\x72\x68\x54\x70\x7d\xf5\x52\x3a\xd8\x6b\x34\xc4\xc1\x80\x3b\xc0\xeb\xf7\x7b\x7d\x3e\x77\x4d\xec\x4b\xdd\xde\x50\x12\x7f\xdd\x1a\x0c\x03\x35\x81\xa7\x1d\xb1\xdf\xb8\x50\xef\x0e\xc3\xdb\x2c\x6a\x03\x35\xf5\x46\xa3\xb7\x17\x57\x11\xcd\xc3\xee\xe5\x26\xab\xed\xd4\x87\x8d\x0b\x81\xda\x76\xef\x7c\xab\xcb\xea\xeb\xed\x76\xef\x72\xa0\xbe\x29\xb6\x5b\x97\xc4\xfe\x15\xa9\xd5\xdd\xe9\x45\xf4\xc0\xbf\x13\xca\xc9\xb0\x5f\xef\x0e\xea\x8d\x61\xab\xd7\x95\x76\xea\xad\xb6\xd8\x0c\x1b\x44\xbb\xd7\xb8\x18\xf6\xbc\xd5\xbd\x54\x6f\xb7\xe2\xb3\x04\xe7\xda\x0a\x1a\x41\x5c\x42\x79\xc9\x36\x2a\xa1\xcb\xc3\x0a\xdf\xc6\x73\x25\x23\x09\x24\x62\xef\x44\x94\x62\xee\x8a\xe1\x3d\xea\xe7\x81\xf2\xa9\x71\x4d\xa9\x83\x6b\xb8\x19\xce\x2d\x7c\xce\x40\xd3\x3a\xd0\xde\x6c\xf0\x88\x05\x39\xfd\x59\xf6\x22\xdf\x37\x9c\x53\xcd\xee\x31\xa3\xf3\xa4\xf1\xee\xe4\x2a\x4e\x78\x37\x34\xa3\xd1\x54\xc7\xda\xb9\xc0\x45\x9e\x65\x75\xfd\x73\xd5\xe2\x9b\xe7\x09\xb6\x8d\xa1\x04\x34\x16\x4b\x93\x32\x6f\xc2\x01\x86\x01\xcb\x49\x7e\x95\x03\x2a\x52\x56\x02\x2a\xd8\x87\x91\xbb\xff\xcc\xf3\xc5\xca\x09\x01\x11\x29\xfc\x32\x5a\x9c\xdd\xf1\x49\x70\x49\xcd\xae\x8c\x87\x40\xf3\xf9\x70\x25\xe9\xd0\xd6\x1b\xe7\x75\xf1\xce\x3b\xe9\xbc\xae\xff\x08\xd6\x75\x8a\xb3\xaa\xa7\x94\x7e\x6f\xa9\x4e\xde\xb8\xfb\x14\x25\x9b\x6c\xb2\xce\x14\x6f\x0d\xd4\x85\x98\x8b\x6d\xbb\xfc\x97\x2a\x93\xe9\x7a\xa1\xb2\xc5\x2f\xef\xba\x9f\x72\xfe\xf1\xf9\xf1\xa3\x3b\xee\x6f\x15\x84\x1b\x84\xc7\x9b\xc9\xb5\x3d\x4b\x77\xff\xc9\x33\xe6\x04\xc6\x9d\xe9\x24\x68\xcb\xfe\xef\xd6\xd6\xff\x02\x00\x00\xff\xff\x7f\x0d\xb5\xc7\xb3\x78\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
