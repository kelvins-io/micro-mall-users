package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x4f\x8f\x22\x45\x14\xbf\xf3\x29\x3a\xad\xc7\x71\x59\x57\xe3\x61\x6f\xc8\x90\x95\x38\xc0\x04\x18\xe3\xc6\x6c\x3a\x45\xf7\x03\x6a\xd3\x5d\xd5\x5b\x55\x3d\x2e\x31\x73\xd8\x83\x66\x8c\x89\x7b\x70\xd5\x83\x5e\xbc\x18\x6f\x1e\x34\x99\x64\x3c\xf8\x65\x04\xc7\x6f\x61\xaa\x69\x9a\xea\xbf\x40\x43\xcf\x40\x66\x93\x9d\x40\x77\xd5\xaf\x7e\xef\xd5\xef\xbd\x7a\xf5\xc2\x17\x15\x4d\xd3\xf9\xe7\x68\x34\x02\xa6\x3f\xd6\xf4\x47\x0f\x1e\xea\x47\xf2\x19\x26\x43\xaa\x3f\xd6\xe4\x7b\x4d\xd3\x05\x16\x36\xc8\xf7\x2e\xa3\x82\x56\x1d\x6c\x32\x6a\x38\xc8\xb6\x0d\x8f\x03\xe3\xc6\xfc\xb1\xff\x79\xfe\xf7\x81\xff\xc4\x87\xd2\x34\xfd\x1c\x18\xc7\x94\x48\x80\xe0\xa3\x46\xa8\xd0\x38\x08\xbd\xa2\x69\x17\xfe\x82\x26\x25\xdc\x73\x80\xeb\x8f\xb5\xcf\xe6\xb3\x90\xeb\xda\xd8\x44\x02\x53\x52\x7d\xce\x29\x91\x63\x9f\xf9\x63\x5d\x46\x2d\xcf\x5c\x73\x2c\x12\x63\xbe\xb4\xa4\x7a\xfe\xae\xcf\xb0\x8a\x4c\x93\x7a\x44\x54\x4d\x06\x48\x40\x38\x40\xce\xa0\x5c\x28\xdf\xa5\x83\x3c\xc7\x41\x6c\x22\xf9\x4f\x2f\x7f\x9a\xfe\x75\xfd\xef\x9b\xdf\x66\x97\x57\x37\x7f\xfe\x3a\xbb\xbc\x0a\x8c\xf4\x07\x52\x17\x98\x4f\xa2\x69\xc9\xc1\x75\x1f\xfb\x8c\x03\xab\xcd\x57\x53\xc7\x32\xe0\x2e\x25\x1c\x78\x64\x2d\x4d\xd3\x1f\x3d\x7c\x18\x7b\xa4\x69\xba\x05\xdc\x64\xd8\x15\x81\x1b\x6b\x1a\xf7\x4c\x13\x38\x1f\x7a\xb6\xb6\x40\x7a\xa0\xc0\xcf\x79\x9b\x63\x70\x50\x02\x4c\xd3\xf4\xb7\x19\x0c\x25\xce\x5b\x55\x0b\x86\x98\x60\x89\x1b\x6c\x5d\x82\x74\x37\x80\xd7\x23\x20\x17\x95\xb4\xcf\x17\x8a\x81\x2e\x62\xc8\x01\x01\x6c\xb9\x4f\xf3\x7f\x31\xd3\x08\x72\x7c\x6d\x0d\xa8\x35\x89\x5b\x80\x49\xd6\x1b\x06\x2f\x3c\xcc\x40\xfa\x59\x30\x0f\x4a\xb2\xfc\x85\x07\x5c\xac\x63\xf8\x33\xc5\x70\x81\x46\x71\x93\x75\x89\xca\x7b\xc0\xce\xb1\xa9\x38\xf2\x59\x45\xc5\x09\x9c\xb7\xd4\x68\x24\x08\x35\x4d\x1f\x41\xb6\x30\x6f\xbe\xbd\x9a\xbe\xfe\x61\x2e\xcc\x7f\xfe\xfe\x65\xf6\xea\xf7\x1c\x61\x3e\x01\x21\x09\x35\x25\xfe\x01\x48\x52\xa1\x7b\x5b\x62\xf4\xb0\x95\xae\xc5\x17\x1e\xb0\x3c\x31\x0e\x91\xcd\xe3\x6a\x14\x13\xd7\x07\xe5\x82\x61\x32\x8a\x4f\x1e\x52\xe6\x20\xb9\xb1\x3a\x26\xe2\x83\xf7\xf5\xdb\xd5\x57\x75\x30\x31\xdc\x31\x25\x50\x5c\x68\xef\xcc\xbe\xfe\x66\xf6\xf3\xf5\xf4\x75\x5e\x2e\x54\xf6\xf0\xc3\xc9\xa9\xbf\xe0\x61\x29\x2f\x60\x7d\x5b\x02\xf4\x13\x10\x9b\x18\x26\xb5\xa0\x34\x25\xaa\xac\x8f\x56\x73\x72\x63\xdb\x56\x1e\x99\x72\x75\xef\x00\x33\xc7\x88\x08\x5e\x45\x9c\x53\x13\x23\x01\x55\x3e\xa6\xae\x31\xf0\x38\x26\xc0\x79\xa4\x1c\xf0\x72\xaa\x81\xef\xbf\x9a\x5d\x5e\x4d\xbf\xfc\xe3\xe6\xd5\x9b\xe9\xf5\x8f\xff\x7d\x77\x9d\x13\x01\xad\xc5\xaa\xb5\xc5\xa2\xbd\x31\x75\x0f\x21\x0a\xd2\x99\xdf\x9b\xba\x20\xcb\xfc\x9d\x15\x07\xe1\x02\x5b\x08\xd9\xb3\xb0\x58\x57\xb6\x05\x53\x78\x48\xb3\x85\x04\x30\x8c\xec\x9a\xbf\xe8\x21\x09\x38\xc2\xfc\xfe\x09\x38\x66\xfe\x3e\x09\xd8\x09\xa8\xad\x5b\x86\x6c\x74\x11\x7b\x02\x22\xe1\x83\x43\xd0\x6d\x1a\xef\xdb\x52\xed\x62\x43\x8c\x03\xab\x84\xd7\xd0\xe2\x51\x98\x24\xf3\xae\xfa\x1b\xdd\xa8\x0e\x52\x5e\x77\xa6\xad\xfd\xcb\x88\x77\x91\x0c\xc3\xde\x97\x42\x6f\xd9\xa9\xf2\x79\x06\x8d\x88\x9e\x88\xf5\xa8\x32\xe2\x48\x07\xe2\x39\x11\x3e\x7a\xbb\xd3\x6d\xd5\x4e\x54\x35\x9e\x74\xea\x1f\xab\xdf\x9b\xed\x4f\x6a\x27\xcd\xe3\x05\xcd\xd0\x3c\x49\x0b\x79\xb6\x1f\x8f\x01\x4a\x24\x89\xab\x04\xfb\x73\x3e\x05\xf8\x9d\x36\xba\xbd\x4e\x3b\xca\xb0\xde\x69\x9d\xd6\xda\x4f\xd5\x47\xbd\xa7\xbd\x7e\xa3\x95\xcb\x31\x44\x4a\xb2\xac\x53\x4c\x8a\x53\xac\x47\xa9\x9c\xf5\xf2\x7d\x25\x87\xa7\x51\x70\x1c\x4a\xc2\x00\x4b\x21\x42\x07\xcf\xc1\x5c\x96\x53\xba\xcb\x64\x8e\x11\x38\x96\x36\x74\xff\x46\x18\x4b\x24\x39\x52\xef\x82\xa8\xcb\x19\xa9\x81\xeb\xf0\x51\x1c\x2a\xeb\x56\x76\x91\x7a\x92\xe7\x37\xce\xb6\xb0\xd2\xc3\xd6\x0a\x66\x6a\x1e\xc8\x3e\x3a\x54\x6b\x07\xc8\x46\xc4\x4c\x38\x2f\xd3\xe2\x23\xd5\xe9\x98\x18\x22\x2a\xa1\x55\x9e\x0f\x55\x97\x8d\x28\x73\x7d\x11\x3a\x41\xf7\xda\xe0\xb1\xc4\xb0\x8a\x52\x24\x9f\xe4\x22\x6f\x68\xab\x9a\x07\x0a\x4a\x66\x17\x91\x21\x63\x6c\xa3\x1d\x8a\x04\x65\xae\x43\xd2\xc2\xae\x40\xac\xe4\x96\x74\xfb\x66\x7b\xac\x01\xbd\x0a\x32\x61\x98\xdf\x60\x5e\xd3\x2b\x59\x7d\xb6\x03\xf7\x49\xd8\x67\xdf\xd0\x0d\xf7\xd2\xfe\xfc\x4e\xcb\x16\x9e\x50\x2f\x33\xbb\x3e\x55\xfc\xce\x61\x09\xb8\x98\x1b\x61\x7b\x32\x0b\x7c\x40\xa9\x0d\x88\x64\xa1\x2f\x5e\x6f\xe3\xfb\x7d\x92\xe1\x1a\xec\x53\x5b\x1c\x7b\xaa\x1c\xbf\x69\x67\x94\x51\xe9\x48\x97\x03\x11\x3b\x38\xaf\x56\xb4\xce\xf6\x42\x16\x6a\x30\xa6\x15\x44\x0b\x66\x98\x08\x18\x01\xcb\xf1\xe7\x7b\x8f\x76\xe3\x4f\x65\x2a\x81\x97\xc2\x28\x6f\xa7\x31\x37\xe8\xb9\xff\xe3\x8d\x5b\x4b\x10\x91\xd3\x7d\xcf\x4a\xfc\x32\xc3\x95\xc1\x08\x73\x01\xcc\x40\x96\x95\xe9\xf0\x3c\x29\x8c\x01\xd9\x62\x6c\x98\x88\x59\x06\x49\x1c\xa2\xeb\x20\x60\x0b\x88\xc0\x62\xb2\x7b\x85\x97\x14\x38\x02\xbd\xdc\xc6\xde\xf9\xaf\x73\x0c\x81\x9d\x42\xb7\x36\xcf\xb5\x36\x9e\xbe\x41\x00\xec\xe0\x78\xd9\x71\x85\x9d\xd6\xa0\xdc\xf4\x2a\xd7\x59\x4c\x5c\xfb\x32\x77\x38\x17\x9a\x9d\xa7\x87\x6c\xa7\x44\xdd\x58\xac\xf1\xd4\x6d\xd4\xfa\x8d\x48\xef\xe9\xf4\x38\xf6\xe4\xb8\x71\xd2\x88\x3e\xa9\x9d\x1d\x37\xfb\xf9\x1d\xaa\x39\x6e\x92\xf3\xa2\x57\x54\x88\x6d\xef\xac\x5e\x6f\xf4\x7a\x2a\x95\x46\xb7\xdb\xe9\x46\x7b\x67\x8d\xae\xd1\xee\xf4\x8d\xc6\xa7\xcd\x5e\x3f\xf1\x26\xf1\xb4\xd5\xe8\xd6\x3f\xaa\xb5\xfb\xe9\x73\xc2\xb7\x89\x37\xb5\x7a\xbd\x73\x96\xf7\x62\x89\x97\xe7\xa8\x85\x49\x49\x4f\x85\xd7\x9a\x3d\x3b\xff\x16\xdd\x8a\x95\xd0\xe9\xf9\x92\x03\x33\x82\x26\xfd\xc6\x93\x39\xbc\x2c\xa3\xf0\x52\x7e\x06\x53\x80\x54\xfc\xa7\x4d\x6b\x4f\x04\x07\x61\xbb\x90\x1b\xca\x39\x48\xb1\xb5\x55\xdd\x40\xce\xb1\xc8\xae\x12\x8b\x57\x9f\x73\xdc\xc2\xdb\x63\x52\x22\x90\x29\x0a\x57\x54\x68\x54\x46\xb1\x7f\xd7\x45\x47\x45\xfe\xbf\xa8\xfc\x1f\x00\x00\xff\xff\x12\x4a\xaf\x3c\x9d\x2d\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
