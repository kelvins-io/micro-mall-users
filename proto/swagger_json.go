package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\x1b\xc7\x11\x7f\xd7\x5f\x71\xb8\xf6\xd1\x35\x5d\xb7\xe8\x83\xdf\x68\x8a\xb5\x89\x48\xa2\x40\x51\x71\x8b\xc2\x38\xac\xee\x86\xe4\xc6\xbc\x0f\xef\xee\x49\x22\x02\x01\x76\xd1\xba\x29\xda\xd4\x01\xe2\xb8\x0d\x12\xa4\x0e\xfa\x81\x00\x05\xec\x02\x69\xa1\x56\x86\x91\x7f\xc6\x3c\xc9\xff\x45\x70\x7b\x77\xe4\x7d\x7f\x92\xca\xd1\xe1\x02\x36\xc4\xdd\xdb\xb9\x99\xd9\xf9\xcd\xce\xec\x0e\xf9\xfe\x86\x20\x88\xf4\x08\x0d\x87\x40\xc4\x1b\x82\x78\xfd\xea\x35\xf1\x8a\xdd\x87\xb5\x81\x2e\xde\x10\xec\x71\x41\x10\x19\x66\x63\xb0\xc7\x0d\xa2\x33\xbd\xa1\x62\x99\xe8\x92\x8a\xc6\x63\xc9\xa4\x40\xa8\xe4\x74\xf3\xbf\x9d\xff\xaf\xf2\x1e\x4e\x4a\x10\xc4\x43\x20\x14\xeb\x9a\x4d\xc0\xfd\x53\xd0\x74\x26\x50\x60\xe2\x86\x20\x9c\xf0\x17\xca\xba\x46\x4d\x15\xa8\x78\x43\xf8\x95\x33\x0b\x19\xc6\x18\xcb\x88\x61\x5d\x6b\xbc\x47\x75\xcd\x7e\xf6\x2e\x7f\xd6\x20\xba\x62\xca\x39\x9f\x45\x6c\x44\xe7\x92\x34\x0e\x7f\xcc\x39\x6c\xc0\x31\xa6\xac\x61\x8c\x74\x0d\x66\xa3\x82\x20\x0e\x81\xf9\x3e\xda\xca\x31\x55\x15\x91\x89\xcd\xbb\xf5\xb7\x07\xd6\x5f\xff\x71\xfe\xe4\x2b\xeb\x83\x53\xeb\x2f\x2f\xa6\x1f\xfd\xd3\xfa\xfa\xab\xe9\xa3\x3f\xfe\xc8\xfa\xfd\x1f\xac\xcf\xcf\xa6\x8f\x4f\x5d\x81\xf9\x44\xdd\x00\xc2\x19\xea\x28\xf6\xe4\x7d\x5b\x2d\x7b\x40\x0e\xb1\x0c\x52\x6b\x04\xf2\x3d\xbb\xe7\xe6\x64\x97\x73\xe0\x9b\x47\x80\x1a\xba\x46\x81\x06\xf8\x10\x04\xf1\xfa\xb5\x6b\xa1\x2e\x41\x10\x15\xa0\x32\xc1\x06\x73\xd5\xdb\x14\xa8\x29\xcb\x40\xe9\xc0\x1c\x0b\x1e\xa5\xab\x3e\xf2\x8e\x4c\xf2\x08\x54\x14\x21\x26\x08\xe2\x0f\x09\x0c\x6c\x3a\x3f\x68\x28\x30\xc0\x1a\xb6\xe9\xba\x4b\x1a\xe6\xb9\xe7\x52\x17\x03\x34\x4e\x7c\x9f\x4e\xfc\xaf\x15\x15\x18\x20\x73\xcc\xb2\x45\xd0\x04\x53\x83\x63\x03\x64\x06\x8a\x00\x84\xe8\x64\x26\x49\x55\x41\x88\xa9\x31\xac\x42\xdb\x26\x9a\xc2\xf7\x46\x8c\x04\xa2\x81\x08\x52\x81\x01\x99\x9b\x9d\xd3\x42\xe2\x68\x48\xe5\x50\x91\x75\x53\x63\x64\x22\xc9\xba\x12\xe1\x1b\x73\x49\xef\x9b\x40\x26\xe1\x21\x02\xf7\x4d\x4c\xc0\xb6\x99\x01\x1a\x53\x08\x0d\xb3\x89\xc1\xa9\x53\x46\xb0\x36\x14\x93\xb4\x9d\xc0\x93\x11\x32\xb6\xe5\x31\x33\xfb\xfb\xae\x4f\x85\x0c\x0d\xc3\xca\x0b\xe0\x62\x4e\xe1\xee\x86\x9f\x8e\x2b\xda\x1c\xbc\x58\x01\x8d\x61\x36\x29\x83\xdc\x8b\xb3\x7f\xbd\x7e\xf9\xaa\x30\x52\x3b\xde\x2b\x57\x09\xaa\x1e\xd3\x6b\xac\xba\x6d\x8d\xd5\x92\xcc\x1c\x29\x6f\x83\xdb\xf0\x07\x35\x19\x2e\xe3\xe2\x4f\xa7\xd3\xc7\x4f\x1d\x97\xf1\xfa\x9b\x2f\xad\x87\x2f\xf2\xba\x8c\x5b\xc0\x38\xf6\xec\x97\xad\x80\xb3\xf0\xb1\xbb\x76\x13\x6e\x4b\x40\x81\x89\x97\x87\x82\xd0\xe8\x40\x27\x2a\xb2\x35\x2b\x62\x8d\xfd\xec\xa7\x97\x0c\x92\x06\xd6\x0e\x31\x03\xc7\x1f\xe6\xdd\x63\x9f\xfd\xdf\xfa\xf0\xf9\x9b\x5f\x3f\xb8\x78\x71\x7a\xfe\xec\xa1\x83\x1f\xe7\xe3\xeb\xb3\xb3\x12\xe0\xb9\x39\xe9\x70\x2e\x5a\x41\xa7\x5c\x77\x20\xf9\xd9\x5e\x03\xca\x6d\x09\x80\xf2\x9b\xd9\xdb\xb1\xbd\x14\xcb\x28\xa3\x9b\x4c\xf1\x5c\x32\x80\x98\x95\xc9\x26\xa3\x5c\xaf\xb1\xe2\xb6\x75\x8c\x7a\xe9\xc8\x1d\xeb\x43\xce\xf5\x0c\xb4\x86\x99\x0c\xda\xf3\x4f\x5f\x4e\x5f\x7d\x92\x17\x9e\x5b\x36\x69\xbb\x67\x15\x50\x39\x63\x76\x0d\x46\xb7\x25\x18\xfe\x81\xae\x44\x8c\xdb\xb1\xfb\xb8\x11\x9f\xd9\x33\x62\x86\xad\xbe\xea\x4a\xdd\x37\x81\xb2\x3c\x02\x2f\x05\x3a\x2a\x10\x79\x84\x34\x46\x1b\x88\x52\x5d\xc6\x88\x41\x83\x8e\x74\x43\x3a\x30\x29\xd6\x80\xd2\xbc\xb0\x9a\x7e\xf2\xc8\xfa\xe0\x74\xfa\xdb\xaf\x2f\x1e\x3e\x99\x9e\xfd\xf9\xcd\xc7\x69\x31\xe3\xb6\xf7\x56\x0f\x66\xb3\x8e\xa6\xc7\xc5\xde\x48\x37\x56\x01\x73\xf1\x9c\xaf\x01\xe8\xb6\xba\x02\x30\x69\xd9\x16\x86\xc6\xb0\x89\x97\x41\xa4\xa9\x60\x96\x1b\x7f\xcf\xbf\xb4\x9e\xfd\xcf\x41\xe1\x95\x8b\x6f\x9e\x4c\x3f\xfb\xc2\xe9\x3a\x7f\xf9\xb1\xf5\xc5\xe7\xa5\xc0\xb8\x8d\x18\x10\x8c\xc6\x4d\xce\xc8\x2a\x81\x31\xc0\xf9\x1a\x8c\x6e\xab\x3d\x18\x43\xcb\x56\x27\x30\xaa\x2e\x6b\xc5\x72\x43\x07\x8f\x17\xff\xfd\x8d\xf5\xf4\xd3\x22\x10\xbc\x05\x2c\xa2\x94\x55\x00\x60\x1c\xdf\x6b\xf8\xb9\x2d\x01\x7e\x9e\x65\x49\x2b\x76\x3c\x99\x03\x54\x57\x66\x3b\x97\x4e\xb3\x42\x47\xeb\xf1\x47\xaf\xcf\xfe\x5e\x1c\x2a\x2b\x89\x93\x35\x48\x56\x7e\x8f\xaa\xc3\xf6\x64\x20\x4a\x8f\x74\xa2\x34\x08\x50\xc8\x1d\x2a\xbe\xf9\xdd\x87\xe7\xaf\x9e\x3b\xe7\x20\xd3\x17\x8f\xce\x9f\x3d\xcc\x7b\x1a\xb2\xeb\xbe\xaf\xc7\x5f\xb7\x02\x38\x0b\x30\xbc\xc6\x98\xdb\xea\x8a\xb1\xd0\x6a\x7d\xb7\x27\x23\x04\x86\x98\x32\x5e\x57\xf7\x7e\xae\x6d\xcc\xa9\x26\x73\x6e\x03\xf2\x02\xaa\xe7\xbd\x64\x05\xb0\xe4\xf1\xba\x86\x91\xdb\xea\x0a\xa3\xf9\x42\x7d\xb7\x08\xa2\x0c\x31\x28\x76\x38\x6f\x7d\xf6\x1f\xeb\xe9\xbf\x1d\x0c\x39\x1b\x94\xf5\x20\xf7\xee\xb4\x6f\x28\x88\x81\xdd\xc5\x8f\x57\xf7\xec\xd7\xaf\x02\xb0\xe2\xf8\x5e\x83\xcc\x6d\x75\x05\x59\xfc\xa2\x5d\x2e\xe0\x66\xd5\xd7\x3e\xee\xe6\xb5\xd2\xbc\x86\xfb\xc0\x1c\x34\xb5\x40\xa1\xa5\x97\x19\xea\x07\xef\x81\x3c\x0f\xe2\xec\xc7\x0d\x20\x0c\x87\xe0\xc1\x9f\x97\x4c\x32\x0e\x83\x26\xe9\xb6\xcf\xbf\xaa\x87\x68\x6c\x42\xc6\xc4\x80\x19\xcf\x13\xd3\x83\x09\xf3\x09\x7e\x12\xeb\x69\x02\x06\x57\x41\x44\x08\x11\xc8\x2d\x5f\xa8\xc0\x26\x30\x0f\x6b\x0c\x86\x81\x9d\x3d\x9c\x78\xff\xe4\x7a\x3c\x55\x15\x28\x45\xc3\x2c\xbd\xc5\x4e\x55\x80\x21\x3c\x8e\x38\x38\x6f\x2a\x22\x04\x05\xc1\x21\x62\x06\x6a\xf8\xf9\x44\xcb\xf7\x9b\x54\x3c\xa4\x63\xd7\x29\xbd\x00\xbd\xc2\xc2\xc9\xba\xaa\xea\x5a\x58\xda\xb4\xd2\x5a\x3e\x21\xea\x5c\xfd\x3a\xc4\x54\xe2\xdf\x2e\x48\x52\xe2\x81\xae\x8f\x01\x69\x89\x86\xeb\x0e\x17\xd2\x49\xa4\xd2\xb7\x16\x4a\x49\x61\x3c\x38\xa5\x12\xb7\x51\x08\xa5\xc6\x36\x8c\x17\x94\xc5\x03\x87\x0e\x73\x83\x26\x59\xb6\xb6\x8a\xf0\xb8\x9a\x48\x1a\x03\x2d\xd1\x7e\x0a\xb0\x92\x7a\x9c\x5a\x0b\x13\xf1\xe3\x26\x58\x9e\x9b\x45\x32\x22\x18\xaf\xb8\xcd\xa9\x95\xc4\x4a\xbd\x15\x57\xca\xac\xf2\xb8\x80\x1e\xe2\x8a\xb0\xbe\xa7\x6a\xf8\x5e\xca\xcf\xe3\xcf\x9b\x13\xef\xf0\xa4\x8a\xec\x3c\x57\x93\xee\x61\x4d\x29\xc0\x2c\x7f\xff\xee\x91\xf2\x8e\x3d\x2d\x56\x7a\x08\x79\xd4\x2c\x8a\x8e\x07\x8e\x25\x15\xae\xcf\xcc\x22\xb5\xad\x1f\xe0\x31\x38\x75\x95\xf1\x04\x8f\x22\xb2\x96\x70\xd4\x01\x1d\xc4\x2c\x40\x28\xd6\x15\x41\x33\xd5\x40\xc8\x2f\x6e\x77\x6f\x76\xb6\xda\xd2\xee\xed\xee\x4e\xdb\x9f\xb4\xb6\xb7\x9b\x9d\x2d\x8f\x87\x59\xd6\xe0\xcb\xf7\x82\x33\x13\x58\xeb\xeb\xf7\x40\xab\x94\x05\x84\x08\x54\x52\x54\xdf\x99\x57\x42\x4b\xbb\x77\x36\xfd\xca\x79\xb7\xdd\xeb\xfc\xfc\x97\x52\xab\xbb\x19\xd0\x59\xbf\xfb\x4e\x7b\x27\x55\x67\x36\x9d\x04\xe6\xfc\x55\x59\x95\xa1\xc4\x82\x92\x66\x59\xeb\x5c\x3b\x79\x6d\x35\x8b\x98\xcf\x2f\xc4\x92\x3c\x04\x82\x07\x93\xf0\x37\x05\x72\x91\x7e\x97\x4f\x4d\x8e\xc6\x62\x4d\x26\x53\x78\x3e\x29\xb7\x25\x05\x8a\x1d\x6b\xe7\xf4\xdd\xa0\x5e\x5a\x28\x78\x7c\x6a\xaf\x20\xf0\xc2\xfd\x68\x8a\x21\x95\x90\x34\xbd\x3c\xab\x82\xdc\xfe\xcb\xf6\x52\xe7\x12\xa1\x0b\x73\xbf\x0a\x78\xdd\xe4\x12\xe8\x62\x2a\xcd\x8a\x33\x2f\x21\x29\xcd\xa8\x68\xac\x05\xca\x72\x70\x1f\x5b\x4b\x54\x53\xcb\xe1\x95\x7e\x92\xb9\x04\xca\xb6\xca\x17\x93\x8b\x66\xd4\xd6\xd5\xc2\x2c\xfc\x60\x64\x29\x68\x29\x7f\x36\x57\x54\x9f\xbe\xa9\x1a\x1c\x33\x69\x79\x2b\x8d\xa9\xa4\x1f\x42\xe2\x31\xe6\x32\x1c\x44\x20\x73\xaf\x60\x00\xcb\x50\xc7\x32\xe1\xea\x5d\x0d\x4b\x48\x51\x4a\x9d\x1b\x8f\x00\x8d\xd9\x48\x92\x11\x51\x24\x2d\x92\x18\xe6\xa1\x10\xf3\x13\x0a\xc2\x62\x2c\x7c\x49\xc0\x61\xe8\xb8\x8a\xbc\x32\x01\xc4\x40\x62\x58\x2d\x75\x2e\x6e\xf2\xdb\x9a\x62\xd3\x0b\x00\x60\x01\xdb\xcb\x82\x4f\xcf\xe2\xae\x4c\x8b\x66\x23\x5d\x6f\x62\x28\x23\x29\xa4\x98\x9a\x6e\x0f\x0b\x77\x0f\x29\x4a\xf1\x85\xce\x95\xd4\xe0\xfb\x02\x61\x09\x08\xc4\x46\xfc\x25\x8c\x3f\x68\x15\xa5\xb2\xf8\x56\xaf\xdd\xec\x07\x32\xf6\xfd\xdd\xcd\x50\xcf\x66\x7b\xab\x1d\xec\x69\xee\x6f\x76\xfa\xa9\x59\xbd\x4b\x37\xca\x73\x6c\x61\x51\xcd\x36\xac\xc5\x1c\x44\xc5\x17\xbc\xd5\x02\x7d\xc9\x4c\x87\x0b\x56\xaa\xac\x0c\x05\x22\xb9\x45\x02\x85\x21\x42\xe1\x78\x19\x11\xe3\x65\xe2\x36\xeb\xd4\x35\x97\x1a\x96\x13\x01\x60\xa5\x52\xc0\xc3\xef\x7a\x08\xff\xc5\xba\x25\x64\x49\x1a\x43\x32\x2b\x1d\xcf\xa5\xdc\xd6\x97\xd7\x97\x11\x3d\xd0\x4f\x67\x28\x0f\xc0\xea\xe4\x10\x02\x11\x35\x8d\x56\x2f\xe5\x2c\x46\xb4\x27\x16\x54\x42\xf0\x5d\x25\x62\xb5\xb8\x9f\x57\x29\xbf\x38\x2c\xe9\x34\x2f\x7b\x2b\xdd\xdb\x6f\xb5\xda\x7b\x7b\x81\x1b\x83\x5e\xaf\xdb\x0b\x6c\xae\x7b\xed\x9e\xb4\xd3\xed\x4b\xed\x5f\x74\xf6\xfa\x91\x91\x48\xef\x76\xbb\xd7\xba\xdd\xdc\xe9\xc7\xcf\x99\x8d\x46\x46\x9a\xad\x56\x77\x3f\x6d\x20\x99\x87\xdd\x3b\x9b\x7c\x74\xbb\xd9\x6f\xdd\x8e\x8c\x6e\x75\x6f\x75\x76\xf8\x78\x73\x6b\xab\x7b\x27\x35\x06\xf0\x14\x12\xd5\x73\x5a\xc5\x56\xcd\x62\x81\x58\x0f\x9c\x71\x5f\xe8\xab\x79\xcc\x63\x75\xa9\x45\x87\xb5\x70\x0f\x29\xbc\x7b\xd7\xa3\x35\x5b\x36\x24\xf3\xcd\x3e\x3b\xa7\x88\x9d\xbd\x0e\x5d\x66\xcf\xbc\x95\xa1\xcb\xe2\x4f\xfc\xdc\x90\xa8\xec\xf2\xd4\x32\xea\xa9\xd5\x41\x4f\xc8\xaf\x56\x72\x8b\xc5\x6a\xc2\xfc\x27\x67\xd9\xb2\x94\x3a\xa3\xd8\xb0\xff\x9d\x6c\x7c\x1b\x00\x00\xff\xff\x14\x6b\xae\x99\x44\x5a\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
