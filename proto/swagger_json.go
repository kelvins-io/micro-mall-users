package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4f\x6f\xe3\x44\x14\xbf\xe7\x53\x8c\x06\x8e\x55\x53\x0a\xe2\xd0\x5b\x94\x46\x50\x89\x6e\x51\x92\x4a\x48\xa8\xb2\xa6\xf6\x4b\x32\x2b\x7b\xc6\x9d\x3f\xa1\x11\xea\x61\x25\x40\x7b\x82\xc3\x96\x45\x08\xb4\x62\x6f\x9c\xe0\x80\x50\xd1\x72\xd8\x2f\x43\xd2\xf2\x2d\xd0\xf8\x4f\x62\x3b\x8e\xeb\xfc\x6b\x13\x51\xa9\x95\x3b\xe3\xf7\xe6\xf7\x7e\xf3\x9b\x79\xef\xf9\xcb\x0a\x42\x58\x7e\x41\xba\x5d\x10\xf8\x00\xe1\xfd\xdd\x3d\xbc\x63\xc6\x28\xeb\x70\x7c\x80\xcc\x3c\x42\x58\x51\xe5\x82\x99\xf7\x05\x57\xbc\xea\x51\x5b\x70\xcb\x23\xae\x6b\x69\x09\x42\x5a\xe1\x70\xf0\x1c\xfe\xdd\x0d\x46\x02\x57\x08\xe1\x3e\x08\x49\x39\x33\x0e\xa2\x47\xc4\xb8\x42\x12\x14\xae\x20\x74\x15\x2c\x68\x73\x26\xb5\x07\x12\x1f\xa0\xcf\x43\x2b\xe2\xfb\x2e\xb5\x89\xa2\x9c\x55\x9f\x4a\xce\xcc\xbb\x67\xc1\xbb\xbe\xe0\x8e\xb6\x4b\xbe\x4b\x54\x4f\x4e\x22\xa9\xf6\xdf\x0b\x10\x56\x53\x01\x22\x84\xbb\xa0\x12\xff\x1a\x56\xb4\xe7\x11\x31\x30\xa0\xef\xbe\xbd\x19\x7e\xf7\xf2\xf6\xfa\xd7\xd1\xf3\x9b\x7f\xde\xbe\x1e\x3d\xfb\x3d\x8a\x2c\x78\x91\xfb\x20\x82\x95\x8f\x1c\xf3\xf2\x47\xa0\x4e\x25\x88\x23\xe3\x3f\xf1\x96\x00\xe9\x73\x26\x41\xa6\x56\x41\x08\xef\xef\xed\x65\x86\x10\xc2\x0e\x48\x5b\x50\x5f\x45\xac\xd5\x90\xd4\xb6\x0d\x52\x76\xb4\x8b\x62\x4f\xbb\x09\xf7\x21\x62\xbb\x07\x1e\x99\x72\x86\x10\x7e\x57\x40\xc7\xf8\x79\xa7\xea\x40\x87\x32\x6a\xfc\x46\x3b\x95\x80\xdb\x8c\x1c\xe3\x94\xf9\x55\x25\xef\xf9\x2a\x11\x9a\x4f\x04\xf1\x40\x81\x98\x6c\x48\xf8\x93\x09\x8a\x11\x2f\x10\x91\xa6\x4e\x16\x3a\x0d\xc2\xbc\xd0\x20\x06\xd9\x29\x01\x17\x9a\x0a\x30\xdc\x76\x88\x2b\x21\x33\xad\x06\x7e\xe0\x54\x2a\x41\x59\x37\x6b\xdc\xe1\xc2\x23\x66\x63\x31\x65\xea\xc3\x0f\x70\x6e\x2c\x67\x89\x58\x14\xe9\x66\xa3\xc0\x86\x1f\xd9\x02\xd1\xa7\x76\x82\x9b\xb3\x4a\xd2\x4f\xc4\xc7\x44\x5f\x1e\x08\xbb\x47\x98\x92\x55\x22\x25\xb7\x29\x51\x50\x95\x3d\xee\x5b\xe7\x5a\x52\x06\x32\xa9\x03\xec\xeb\xd9\xe2\x1b\x7e\xff\xcd\xe8\xf9\xcd\xf0\xeb\x3f\xee\x9e\x5d\x0f\xdf\xfc\xf0\xef\x8b\x37\x05\xe2\x3b\x8e\x57\xad\xc5\x8b\xb6\x7a\xdc\xdf\x06\x1d\xe6\x23\x7f\x28\x49\x9e\x73\x67\x4a\x78\xa1\x26\xf3\x66\x12\x92\x54\x42\x67\x15\xb9\xd2\xf0\x2f\x34\x48\x55\x26\xfa\xfb\x44\x3c\x5e\x60\x09\x21\x6b\x87\xaa\xd2\xb2\xfd\xed\xf5\xe8\x97\xbf\x42\xf1\xee\xdc\xbd\xbd\x1e\xfe\xf4\x2a\x1c\xba\xfd\xfb\xc5\xe8\xd5\xcf\x65\x34\x7c\x4c\x14\x08\x4a\xdc\x5a\xb0\xee\x36\x69\x38\x85\xfc\xff\xa7\xe1\x4c\xf8\x9b\xa4\x61\x2f\x82\x36\x5f\xea\x0f\x65\x7c\xf7\xe7\x57\xa3\x97\x3f\x16\xa7\xfe\x29\x0e\xb6\x41\xb7\x79\xb8\x1f\x4a\xb5\xf1\x86\x58\x5b\x56\x14\x94\xd0\xe2\xce\xf8\x9e\xe4\x72\x45\xc5\xe5\x56\xca\xeb\xd1\xb4\xb5\x79\x37\xe2\x63\x5c\x86\xe3\x16\x2b\x01\x6f\xd2\x10\x05\x38\xeb\xdc\xf3\x38\x1b\x6f\x4b\xe2\x6e\x8c\x4f\x12\x3f\x7f\x0a\xf6\x24\x09\x9b\x16\xcc\x07\xa1\x68\x46\x6c\xd8\xe6\x0e\x64\xe5\x57\x40\x50\x13\x54\xdd\x58\xe4\x6e\xb7\x27\xbb\x59\x57\x99\x83\x5d\xc9\xd2\x96\xbe\xff\xef\xbf\xdc\x96\x8a\xd4\x70\x36\x47\xac\x19\x92\x73\x43\xce\x74\xa5\x73\xeb\x2b\xe8\x3a\x4b\xb2\x32\xd5\xf6\x6d\x39\x19\xe3\xae\xbb\x4c\xfc\xc5\xf5\xf6\x12\x4c\x24\xf3\x59\xb1\x78\x93\x17\xcc\xec\x9c\x94\x24\x24\xe8\x1f\xd7\xe0\x97\x4a\x6b\xdc\xa4\xce\x72\x7e\xce\xb9\x0b\x84\xcd\xf2\x1e\x4f\x2f\xc3\xfd\x26\xc9\xb0\x04\xfa\xdc\x2a\x77\x43\x95\x13\xb4\x6e\x96\x5e\x83\x67\x43\x39\x30\xb5\x82\x8b\xfa\x9e\xee\x69\x23\x64\x91\x3c\x8c\xaa\xe0\xb4\x50\xa6\xa0\x0b\xa2\x80\xcf\xf7\xf7\x57\xc3\x67\xc2\x94\xc1\xa5\xb2\xd6\xb7\xd3\x54\x5a\xbc\x1f\x7c\x26\x7e\xb0\x0b\x22\x95\xd6\x96\x10\xc0\x3a\xe8\x58\xe7\x71\x15\xd0\xa5\x52\x81\xb0\x88\xe3\xcc\x24\xbc\x48\x0a\x3d\x20\xae\xea\x59\x36\x11\x8e\xc5\xa6\x92\x68\x19\x0f\xd4\x01\xa6\xa8\x1a\xac\x5e\xe1\x6b\x3a\x38\x8a\x5c\x2e\x13\xaf\x2d\x80\x28\xb0\x14\xf5\x66\x62\x2b\x32\xd7\xbe\x33\xb7\xf9\x1c\x07\x60\x05\xe9\x65\xc5\xa5\x65\x5e\x8f\x6a\x45\x98\xca\xae\x71\x12\x1b\xb6\x8d\xdd\x82\xc4\x6c\x68\x7a\x58\xf9\xf5\x30\x9b\x94\x34\x8d\x39\x44\x64\x16\xc2\xc0\xb4\x97\x6a\x27\x71\xbd\xd9\xa8\xb5\x1b\xc9\x8f\x09\xa7\x9f\x1e\x66\x46\x0e\x1b\x9f\x34\xd2\x23\xb5\xd3\xc3\xa3\x76\x0c\x71\xdc\xaf\x9a\x3e\x93\x68\x37\x08\x22\xf2\x3b\x8d\x39\x6e\xfc\x16\x42\xdb\x3a\xad\xd7\x1b\xad\x56\x12\x4a\xa3\xd9\x3c\x69\xa6\xf0\xb7\x1a\x4d\xeb\xc9\x49\xdb\x6a\x7c\x76\xd4\x6a\x4f\xcd\x4c\x8d\x1e\x37\x9a\xf5\x8f\x6b\x4f\xda\xf9\x36\xe3\xd9\x70\xa6\x28\xe4\x18\xdc\x74\xcc\xe3\x06\x65\xc3\x32\x19\xb1\x6d\xae\x99\xba\x5f\xa9\xf9\x37\x9f\x04\x61\x45\x5f\x5c\xe6\x36\x96\x70\xb9\x8e\x12\x4a\x33\x25\x06\x56\xde\xb7\x88\x32\xa0\xfc\x1e\x67\x0b\x19\x82\x47\xa8\xbb\x10\x0d\xeb\x49\x89\xd4\x59\xaa\x02\x60\x7d\xaa\x66\xd7\x7b\x8b\xd7\x91\xa1\xdf\x85\xb7\xc7\xe6\x4c\x11\x5b\x2d\x5c\x1b\x91\xee\x3a\xca\xf6\xc7\x2e\x1f\x2a\xe6\xf7\xaa\xf2\x5f\x00\x00\x00\xff\xff\x73\x7a\x1e\x62\xd1\x21\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
