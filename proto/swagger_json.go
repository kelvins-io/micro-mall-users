package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x98\xcf\x6f\x23\x35\x14\xc7\xef\xf9\x2b\x2c\xc3\xb1\x6a\x4a\x41\x1c\x7a\xab\xaa\x0a\xf5\xb0\xac\x94\x6c\x25\x24\x54\x8d\x5c\xcf\x4b\xe2\xd5\x8c\x3d\xb5\x9f\x43\x23\xd4\xc3\x4a\x80\xf6\x04\x87\x2d\x8b\x10\x68\xc5\xde\x38\xc1\x01\xa1\xa2\xe5\xb0\xff\x0c\xc9\x96\xff\x02\x79\x26\x3f\x9c\xc9\x24\x9d\xfc\x6a\x13\xb1\xd2\x56\x53\xff\x78\x7e\xef\xeb\x8f\x9f\xfd\xfa\x65\x85\x10\x6a\xbe\x60\xcd\x26\x68\x7a\x40\xe8\xfe\xee\x1e\xdd\x71\x6d\x42\x36\x14\x3d\x20\xae\x9f\x10\x8a\x02\x23\x70\xfd\x89\x56\xa8\xaa\xb1\xe0\x5a\x05\x31\x8b\xa2\xc0\x1a\xd0\x26\xc8\x9a\xd3\xef\xec\xe7\x6e\xda\x92\x9a\x22\x84\xb6\x41\x1b\xa1\xa4\x33\xd0\xff\x24\x52\x21\x31\x80\xb4\x42\xc8\x55\xba\x20\x57\xd2\xd8\x18\x0c\x3d\x20\x9f\x67\xb3\x58\x92\x44\x82\x33\x14\x4a\x56\x9f\x1a\x25\xdd\xd8\xb3\x74\x6c\xa2\x55\x68\x79\xc9\xb1\x0c\x5b\x66\x14\x49\xb5\xfd\x41\xea\x61\x75\x2c\x40\x42\x68\x13\xd0\xfb\xd5\xa9\x62\xe3\x98\xe9\x8e\x73\xfa\xf6\xdb\x9b\xee\x77\x2f\xdf\x5d\xff\xda\x7b\x7e\xf3\xcf\xdb\xd7\xbd\x67\xbf\xf7\x23\x4b\x07\xaa\x04\x74\xba\xf2\x49\xe8\x06\x7f\x02\x78\x6a\x40\x9f\x38\xfb\xde\x28\x0d\x26\x51\xd2\x80\x19\x5b\x85\x10\xba\xbf\xb7\x97\x6b\x22\x84\x86\x60\xb8\x16\x09\xf6\x55\x3b\x24\xc6\x72\x0e\xc6\x34\x6c\x44\x06\x96\x76\x3d\xf3\x99\xc7\xbc\x05\x31\x9b\x30\x46\x08\x7d\x5f\x43\xc3\xd9\x79\xaf\x1a\x42\x43\x48\xe1\xec\xf6\x77\xca\x73\xb7\xd6\x37\x4c\xc7\xa6\x5f\x55\x8a\xbe\xaf\xbc\xd0\x12\xa6\x59\x0c\x08\x7a\xb4\x21\xd9\xbf\x5c\x50\x92\xc5\x29\x44\x56\x84\x79\xd7\x45\x1a\xe6\x85\x05\xdd\xc9\x77\x69\xb8\xb0\x42\x83\xd3\xb6\xc1\x22\x03\xb9\x6e\xec\x24\xa9\x51\x83\x5a\xc8\x66\x7e\x72\x43\xe9\x98\xb9\x8d\xa5\x42\xe2\xc7\x1f\xd1\xc2\x58\xce\xbc\x58\x90\x35\xf3\x51\x50\xa7\x8f\xa9\x83\x6e\x0b\xee\x69\x73\x56\xf1\xed\xf4\xf5\x18\xf1\x15\x83\xe6\x2d\x26\xd1\x54\x99\x31\x8a\x0b\x86\x50\x35\x2d\x95\xf8\xcc\x25\x76\x3a\x73\xdd\xef\xbf\xe9\x3d\xbf\xe9\x7e\xfd\xc7\xed\xb3\xeb\xee\x9b\x1f\xfe\x7d\xf1\x66\x06\x73\x8f\x06\x8b\x1d\x0e\xd6\xaa\xbb\xa5\xb6\x00\xbf\x62\xcf\xef\x8b\xc4\x73\x15\x4e\xf0\x96\xa1\x58\xd4\xe3\x91\x88\xda\xe6\x41\x5c\x69\xf8\x17\x16\x0c\x96\x89\xfe\x2e\x76\x87\x0b\x2c\xc1\xaf\x0d\x05\x96\xc6\xf6\xb7\xd7\xbd\x5f\xfe\xca\xe0\xdd\xb9\x7d\x7b\xdd\xfd\xe9\x55\xd6\xf4\xee\xef\x17\xbd\x57\x3f\x97\x61\xf8\x11\x43\xd0\x82\x45\x87\xe9\xba\xdb\xc4\xf0\x98\xe7\xff\x3f\x86\x73\xe1\x6f\x12\xc3\x71\xdf\xb5\xf9\x6e\xfc\x0c\xe3\xdb\x3f\xbf\xea\xbd\xfc\x71\xf6\x8d\x3f\xa1\xc1\x36\x70\x5b\xe4\xf7\x7d\x51\x3b\xd8\x90\x60\xcb\xde\x02\x25\x58\xdc\x19\xe6\x49\x65\x56\xf4\xa6\xdc\x4a\xbc\x1e\x8c\xad\xcd\xcb\x88\x0f\x91\x0c\x87\x95\x95\xe7\xde\xa8\x0e\x4a\xfd\x3c\x52\x71\xac\xe4\x70\x5b\xbc\xdc\x38\x38\x49\xea\xfc\x29\xf0\xd1\x25\xec\x2a\xaf\x04\x34\x8a\x1c\x6c\x94\xab\x10\xf2\xf8\xcd\x10\xa8\x06\x78\xe4\x66\x14\x6e\x77\x6c\x9a\x79\x53\xb9\x83\x5d\xc9\xcb\x36\x9e\xff\xef\x4e\x6e\x4b\x45\xea\x34\x9b\x23\xd6\x9c\xc8\x85\x21\xe7\x8a\xd1\xb9\xf9\x4a\x8b\xcd\x92\xaa\x4c\x54\x7b\x5b\x2e\xc6\xb0\xd8\x2e\x13\xff\xec\xf7\xf6\x12\x4a\xf8\xf7\xd9\x6c\x78\xfd\x04\x33\xfd\x4e\xf2\x05\x71\x65\xe3\x3a\xec\x0a\x13\x0c\x6b\xd3\x69\xc6\xcf\x95\x8a\x80\xc9\x69\xd6\x07\xdd\xcb\x68\xbf\x49\x18\x96\xf0\xbe\xf0\x95\xbb\xa1\xe4\xa4\xa5\x5b\x60\xd7\x60\xd9\x49\x0e\x12\x57\x90\xa8\xef\xa8\x9e\x36\x02\x0b\xff\x30\xe2\x8c\xd3\x22\x24\x42\x13\xf4\x0c\x3d\x3f\xdc\x5f\x8d\x9e\xde\x54\x09\x97\x18\xac\x6f\xa7\x85\x09\x54\x3b\xfd\xeb\xf0\xbd\x25\x88\xb1\x6b\x6d\x09\x00\xd6\x21\xc7\x3a\x8f\xab\x86\xa6\x30\x08\x3a\x60\x61\x38\x55\xf0\x59\x28\xb4\x80\x45\xd8\x0a\x38\xd3\x61\x20\x27\x2e\xd1\x32\x16\x44\x08\x12\x05\x76\x56\x4f\xf8\x9a\x0e\x0e\xb2\xcb\xb9\xe3\x9d\x03\xc1\x15\x24\xf8\x7b\x7b\xdc\x6d\xf8\x7b\x77\xba\xe3\x83\x72\xa0\xc0\xcd\xdc\x59\xa2\x20\x6d\x3c\x56\x12\xd1\xfa\xe9\xd1\xd1\x71\xbd\xee\x57\xc4\xc7\xb5\xda\xe3\x9a\xdf\x70\x5a\x3f\xae\x05\x9f\x3e\x7e\x12\x1c\x7f\x76\x52\x7f\x32\xf0\x69\x58\x6a\xb9\x12\x89\xd9\x28\x45\x6d\x60\x6e\xd2\xcb\xe1\x43\x73\x09\x35\x19\xe7\xca\x4a\xbc\x3b\x79\x14\xb2\xee\xdc\x08\xfa\x55\xee\xdc\x93\x0d\x5c\xae\xe3\xda\xb2\x12\x75\x27\x28\xaa\xff\xca\x38\x95\xb4\x94\x5c\x68\x22\xc4\x4c\x44\x0b\xc9\xb0\x9e\x34\x24\xc2\xa5\xb2\xae\x6c\x0b\x9c\x7e\xc7\x2e\x7e\x77\x67\x76\x17\xde\x1e\xae\x24\x32\x8e\x0b\xdf\x47\xac\xb9\x2a\xa9\xc7\x93\x47\xc5\xfd\xbf\xaa\xfc\x17\x00\x00\xff\xff\x11\xfe\xbb\xcb\xbe\x1e\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
